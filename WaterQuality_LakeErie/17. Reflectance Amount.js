/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = /* color: d63000 */ee.Geometry.Polygon(
        [[[-81.8756103515625, 42.596944591213976],
          [-81.8316650390625, 42.5484012952862],
          [-81.7218017578125, 42.62524406462792],
          [-81.8096923828125, 42.71006532890601]]]),
    geometry2 = /* color: 98ff00 */ee.Geometry.Polygon(
        [[[-83.57025146484375, 41.69451375429399],
          [-83.3258056640625, 41.66784681529111],
          [-83.089599609375, 41.591888125847646],
          [-82.9632568359375, 41.505556308050686],
          [-82.85064697265625, 41.51172668948318],
          [-82.72705078125, 41.53434638980475],
          [-82.62542724609375, 41.41293002577425],
          [-82.47161865234375, 41.365536623308905],
          [-82.36175537109375, 41.41293002577425],
          [-82.24090576171875, 41.427347246945],
          [-82.001953125, 41.503499383554725],
          [-82.034912109375, 42.27946793846568],
          [-82.4688720703125, 42.085038021847154],
          [-82.51007080078125, 41.976912002348506],
          [-82.50972747802734, 41.91741539713489],
          [-82.54302978515625, 41.99732721531279],
          [-82.606201171875, 42.038137999741075],
          [-82.6995849609375, 42.04221763769271],
          [-82.82867431640625, 42.00549146736489],
          [-82.935791015625, 41.98507887314324],
          [-83.03466796875, 42.03609808254534],
          [-83.1060791015625, 42.05445497999412],
          [-83.1060791015625, 42.14208693993462],
          [-83.07861328125, 42.209257234286305],
          [-83.11019897460938, 42.26768689318153],
          [-83.15963745117188, 42.236175276963394],
          [-83.199462890625, 42.09570676103531],
          [-83.2708740234375, 41.9421911163313],
          [-83.33404541015625, 41.94014812213756],
          [-83.3697509765625, 41.8829177113481],
          [-83.47137451171875, 41.792880552910205],
          [-83.51875305175781, 41.70292500835719]]]),
    hdpoly = /* color: 0B4A8B */ee.Geometry.Polygon(
        [[[-83.57025146484375, 41.69451375429399],
          [-83.3258056640625, 41.66784681529111],
          [-83.089599609375, 41.591888125847646],
          [-82.9632568359375, 41.505556308050686],
          [-82.85064697265625, 41.51172668948318],
          [-82.54302978515625, 41.99732721531279],
          [-82.606201171875, 42.038137999741075],
          [-82.6995849609375, 42.04221763769271],
          [-82.82867431640625, 42.00549146736489],
          [-82.935791015625, 41.98507887314324],
          [-83.03466796875, 42.03609808254534],
          [-83.1060791015625, 42.05445497999412],
          [-83.1060791015625, 42.14208693993462],
          [-83.07861328125, 42.209257234286305],
          [-83.11019897460938, 42.26768689318153],
          [-83.15963745117188, 42.236175276963394],
          [-83.199462890625, 42.09570676103531],
          [-83.2708740234375, 41.9421911163313],
          [-83.33404541015625, 41.94014812213756],
          [-83.3697509765625, 41.8829177113481],
          [-83.47137451171875, 41.792880552910205],
          [-83.51875305175781, 41.70292500835719]]]),
    glwd3 = ee.Image("users/jeffreyh/glwd_3_v2"),
    suspected1984 = /* color: ffc82d */ee.Geometry.Polygon(
        [[[-83.00102233886719, 41.5240014285243],
          [-82.89871215820312, 41.51269075845857],
          [-82.83760070800781, 41.54044978347556],
          [-82.81288402529162, 41.57307024340326],
          [-82.83348083496094, 41.604147651076765],
          [-83.34434509277344, 41.78206502192827],
          [-83.24386713559562, 41.92800697794784],
          [-83.13217163085938, 42.0064481470799],
          [-82.913818359375, 41.95438387658198],
          [-82.80670166015625, 41.99113954535575],
          [-82.69271850585938, 42.01052981889534],
          [-82.59862057434384, 41.987588072627545],
          [-82.55950927734375, 41.97889001249024],
          [-82.529296875, 41.97786911170172],
          [-82.59049081316732, 42.03074698291023],
          [-82.67922705425042, 42.042767097813105],
          [-82.74685244183127, 42.0320697522012],
          [-82.81614789852358, 42.00242110312728],
          [-82.91626791806141, 41.98990435321303],
          [-82.95184428170933, 42.02808299337384],
          [-83.09179040114395, 42.044962843812996],
          [-83.09899175538965, 42.21263865011026],
          [-83.12821301292001, 42.20931703044625],
          [-83.1434956487825, 42.01846446539129],
          [-83.27137330814844, 41.947629579227126],
          [-83.33479485726673, 41.93845116364604],
          [-83.50945221630661, 41.73339865218926],
          [-83.48770931827988, 41.6917366495331],
          [-83.35925580655743, 41.674553271391275],
          [-83.32781191323608, 41.70177100120373],
          [-83.31421171527018, 41.672225857221726],
          [-83.19640489620394, 41.623858317655625],
          [-83.07086404675056, 41.59115003790145]]]),
    suspected1985 = /* color: 00ffff */ee.Geometry.Polygon(
        [[[-83.485107421875, 41.69342421615132],
          [-83.35601806640625, 41.67598909594535],
          [-83.32855224609375, 41.701627343789184],
          [-83.3148193359375, 41.67086022030498],
          [-83.19259643554688, 41.62365539068639],
          [-83.067626953125, 41.59285100004955],
          [-82.99758911132812, 41.519888686301904],
          [-82.89321899414062, 41.513719082873465],
          [-82.8369140625, 41.54044978347556],
          [-82.81043717183644, 41.576312350319526],
          [-82.77118409224289, 41.59429305453459],
          [-82.72275031419053, 41.60334823997918],
          [-82.72600735824926, 41.62540978187234],
          [-82.77027395056473, 41.63541287945437],
          [-82.78420691980438, 41.67010152287779],
          [-82.83933609258344, 41.63304591447347],
          [-82.81462774542365, 41.62161000422837],
          [-82.89150196299192, 41.58614265245128],
          [-83.06583474073261, 41.64427025744824],
          [-83.28775066896941, 41.855470694091196],
          [-83.11392644216926, 42.05020976565477],
          [-83.10044420649359, 42.25971057511295],
          [-83.13773786197692, 42.26480265879682],
          [-83.27222971115634, 41.94564619876876],
          [-83.33382498245868, 41.940274346888444],
          [-83.50877660018296, 41.73248524866144]]]),
    suspected1986 = /* color: bf04c2 */ee.Geometry.Polygon(
        [[[-82.83004760742188, 41.60453272932533],
          [-83.34228515625, 41.7850090749955],
          [-83.23928833007812, 41.93127310643354],
          [-83.13491821289062, 42.00785125130589],
          [-82.913818359375, 41.95476685744923],
          [-82.80807495117188, 41.99152230528149],
          [-82.68997192382812, 42.010912462200984],
          [-82.55401611328125, 41.976210113014076],
          [-82.54165649414062, 41.994584301828276],
          [-82.58560180664062, 42.03029671015545],
          [-82.68035888671875, 42.04457605890055],
          [-82.75039672851562, 42.03029671015545],
          [-82.81356811523438, 42.003769407625384],
          [-82.91656494140625, 41.99050160703149],
          [-82.94677734375, 42.02723643228264],
          [-83.09097290039062, 42.045595889606865],
          [-83.10333251953125, 42.2685443481363],
          [-83.12393188476562, 42.266511843374744],
          [-83.15139770507812, 42.10758357426555],
          [-83.14315795898438, 42.05681294691728],
          [-83.33404541015625, 41.938424294872675],
          [-83.50914001464844, 41.73257190958257],
          [-83.49197387695312, 41.69175782799976],
          [-83.3587646484375, 41.67432225618881],
          [-83.32992553710938, 41.70098651212107],
          [-83.31756591796875, 41.67432225618881],
          [-83.21731567382812, 41.62917295693295],
          [-83.0731201171875, 41.5922090855108],
          [-83.00445556640625, 41.52335882978217],
          [-82.90008544921875, 41.511019696442695],
          [-82.83279418945312, 41.54083524163318],
          [-82.81356811523438, 41.57577389994406]]]),
    suspected1988 = /* color: ff0000 */ee.Geometry.Polygon(
        [[[-83.50445997717634, 41.73464298185971],
          [-83.48841454169758, 41.689845025792415],
          [-83.36061640838506, 41.675388158594465],
          [-83.32898336766004, 41.699864065435854],
          [-83.31215252192669, 41.67179141881174],
          [-83.19391109943837, 41.62491135817232],
          [-83.0703220225513, 41.5943277114447],
          [-83.00085622794097, 41.52380140338941],
          [-82.89679989258838, 41.50594839210823],
          [-82.85086761284987, 41.51895270177287],
          [-82.82963787811877, 41.53811649454095],
          [-82.82006948335584, 41.57424216205857],
          [-82.82903174045236, 41.585705228316115],
          [-83.2765182173813, 41.809059922972],
          [-83.20343158428227, 41.924026080341534],
          [-83.15171208634598, 41.92938564219462],
          [-83.15765008778948, 41.98172954993276],
          [-82.96409019349272, 41.92752030467202],
          [-82.90504320876141, 41.97958516645527],
          [-82.95310429391276, 42.02756617508875],
          [-83.09437490017348, 42.044829606901004],
          [-83.09923050911476, 42.26111006448824],
          [-83.1371184939157, 42.26581523762547],
          [-83.27182122616318, 41.942848770820326],
          [-83.3359753902339, 41.940134674533596]]]),
    suspected1990 = /* color: 00ff00 */ee.Geometry.MultiPolygon(
        [[[[-83.48648071289062, 41.68932225997044],
           [-83.353271484375, 41.67496335351134],
           [-83.32855224609375, 41.69650051162981],
           [-83.31344604492188, 41.66470503009207],
           [-83.19122314453125, 41.62468195039133],
           [-83.06900024414062, 41.5969591019372],
           [-82.99896240234375, 41.5240014285243],
           [-82.89047241210938, 41.50549203014924],
           [-82.8314208984375, 41.54250553376699],
           [-82.80532836914062, 41.58155237169248],
           [-82.8369140625, 41.58976975204707],
           [-82.8643798828125, 41.58155237169248],
           [-82.891845703125, 41.53325414281322],
           [-83.36151123046875, 41.72623044860004]]],
         [[[-82.6885986328125, 41.73340458018376],
           [-82.672119140625, 41.74262728637672],
           [-82.67898559570312, 41.79179268262892],
           [-82.694091796875, 41.79895948813609],
           [-82.70233154296875, 41.78974487671898]]],
         [[[-82.67074584960938, 41.80407814427237],
           [-82.64190673828125, 41.81329069491422],
           [-82.64328002929688, 41.82557203489185],
           [-82.6885986328125, 41.82557203489185]]]]),
    suspected1991 = /* color: 0000ff */ee.Geometry.Polygon(
        [[[-82.83828735351562, 41.59118200897135],
          [-82.86712646484375, 41.58091034480825],
          [-82.89047241210938, 41.53158361174009],
          [-83.07003653353468, 41.60830642910657],
          [-83.23069711404958, 41.653970453530945],
          [-83.36013793945312, 41.724564910614696],
          [-83.41814004436424, 41.76300711373522],
          [-83.32966896146542, 41.870327180003656],
          [-83.24574990602025, 41.94822173578705],
          [-83.119898344214, 42.036008266764036],
          [-82.91546074724204, 41.966613630592754],
          [-82.66347716461803, 42.02428849917453],
          [-82.60838946383205, 42.00735195025688],
          [-82.55189200789175, 41.97755149518569],
          [-82.54424247304189, 41.99377977466215],
          [-82.55994055021188, 42.00388384308911],
          [-82.57740483263018, 42.02694367388184],
          [-82.6645378247315, 42.04040767801904],
          [-82.73589808769998, 42.03145172081271],
          [-82.80722217686787, 42.00817009133639],
          [-82.91961195720239, 41.98807356303873],
          [-83.09279370098011, 42.05640776664133],
          [-83.21446959542038, 42.05442185332217],
          [-83.2738265200095, 41.948349602560256],
          [-83.33211293134167, 41.94437569587998],
          [-83.38674019163875, 41.87124723086256],
          [-83.46796353459109, 41.797326663547224],
          [-83.51806640625, 41.688681305689016],
          [-83.35189819335938, 41.67432225618881],
          [-83.32855224609375, 41.69483420317656],
          [-83.31756591796875, 41.667141529918375],
          [-83.21319580078125, 41.63019942878951],
          [-83.07174682617188, 41.59837120157308],
          [-83.001708984375, 41.524386984706425],
          [-82.89321899414062, 41.504849247625316],
          [-82.825927734375, 41.545974464191694],
          [-82.80532836914062, 41.58296480836916]]]),
    suspected1992 = /* color: 999900 */ee.Geometry.Polygon(
        [[[-82.89871215820312, 41.506906129240534],
          [-82.84378051757812, 41.52027426698907],
          [-82.77923583984375, 41.62917295693295],
          [-82.82318115234375, 41.620960593701106],
          [-82.86575317382812, 41.63122588430197],
          [-82.92892456054688, 41.730714374728855],
          [-83.07174682617188, 41.761452865591096],
          [-83.16925048828125, 41.724564910614696],
          [-83.2818603515625, 41.846419331833644],
          [-83.3038330078125, 41.89959391982876],
          [-83.20632934570312, 41.89141609339026],
          [-83.23928833007812, 41.93127310643354],
          [-83.23036193847656, 41.972955797753094],
          [-83.15826416015625, 42.0148025384822],
          [-82.94540405273438, 41.978060531846225],
          [-82.90145874023438, 41.977550076848935],
          [-82.88223266601562, 41.98469607447384],
          [-82.85064697265625, 41.98877914162096],
          [-82.83451080322266, 41.993276592158],
          [-82.80155181884766, 41.996593657007686],
          [-82.78301239013672, 42.00475800317426],
          [-82.77099609375, 42.00552335692051],
          [-82.73529052734375, 42.018788025609645],
          [-82.70439147949219, 42.02771461041159],
          [-82.63847351074219, 42.02771461041159],
          [-82.58628845214844, 42.00781936291713],
          [-82.55607604980469, 41.97643344227776],
          [-82.54337310791016, 41.99710395933242],
          [-82.60551452636719, 42.03459997665478],
          [-82.67967224121094, 42.03969976708606],
          [-82.69306182861328, 42.03485497589594],
          [-82.72602081298828, 42.03408997510315],
          [-82.78404235839844, 42.015982268695524],
          [-82.79159545898438, 42.008584679835224],
          [-82.81185150146484, 42.00552335692051],
          [-82.81803131103516, 42.00169649611979],
          [-82.85442352294922, 41.99940026915666],
          [-82.91004180908203, 41.98485557419915],
          [-82.93201446533203, 41.985876362978885],
          [-83.0013656616211, 42.02286890559655],
          [-83.03741455078125, 42.03357996945908],
          [-83.11088562011719, 42.05458243990387],
          [-83.10676574707031, 42.151377991815345],
          [-83.10264587402344, 42.17937017484285],
          [-83.10195922851562, 42.25209188149128],
          [-83.111572265625, 42.2654955664195],
          [-83.155517578125, 42.23601640837779],
          [-83.14178466796875, 42.13629525203469],
          [-83.16238403320312, 42.05681294691728],
          [-83.21868896484375, 42.01397352578115],
          [-83.22280883789062, 42.00070785300186],
          [-83.25164794921875, 41.977231040397854],
          [-83.26675415039062, 41.940467344295094],
          [-83.29696655273438, 41.950490107133966],
          [-83.32786560058594, 41.92954903927401],
          [-83.34022521972656, 41.91268903848518],
          [-83.35807800292969, 41.89173555938813],
          [-83.38005065917969, 41.87333171349717],
          [-83.46519470214844, 41.79556815327386],
          [-83.49266052246094, 41.740770042331064],
          [-83.49128723144531, 41.685925129511325],
          [-83.34365844726562, 41.67002673941299],
          [-83.32992553710938, 41.69618007104923],
          [-83.309326171875, 41.6731041536838],
          [-83.25164794921875, 41.64232339075563],
          [-83.24134826660156, 41.635139096004046],
          [-83.21388244628906, 41.635139096004046],
          [-83.14796447753906, 41.613581406580685],
          [-83.09852600097656, 41.60742074293611],
          [-82.96119689941406, 41.50671329936487]]]),
    suspected1993 = /* color: 009999 */ee.Geometry.MultiPolygon(
        [[[[-82.89115905761719, 41.50568486366211],
           [-82.83073425292969, 41.54321218283608],
           [-82.81013488769531, 41.5755812753148],
           [-82.82798767089844, 41.58739452300032],
           [-82.83966064453125, 41.590475884371116],
           [-82.86506652832031, 41.58174497851306],
           [-82.89253234863281, 41.532418882669276],
           [-82.95089721679688, 41.5447539358184],
           [-83.00857543945312, 41.55811425509098],
           [-83.03466796875, 41.592016509904404],
           [-83.28048706054688, 41.69515465046259],
           [-83.40957641601562, 41.7622851616962],
           [-83.39859008789062, 41.851534195220545],
           [-83.3367919921875, 41.86994431713881],
           [-83.30245971679688, 41.91288065442666],
           [-83.29559326171875, 41.94455324677069],
           [-83.2598876953125, 41.935359598009676],
           [-83.24203491210938, 41.940467344295094],
           [-83.25027465820312, 41.96804210476445],
           [-83.23379516601562, 41.97927284606648],
           [-83.21937561035156, 41.98724802212872],
           [-83.19602966308594, 41.993882607297],
           [-83.18092346191406, 42.00612925544001],
           [-83.16787719726562, 42.01990391724706],
           [-83.11166448259854, 42.038779283880196],
           [-83.01282012048335, 42.01149977360052],
           [-83.00462628171033, 42.02296353964799],
           [-83.11182795498553, 42.06299592811999],
           [-83.1586042597022, 42.0397950369407],
           [-83.19877624511719, 42.04642449000173],
           [-83.21868896484375, 42.057131584381416],
           [-83.21731567382812, 42.00255755986817],
           [-83.24478149414062, 41.993882607297],
           [-83.26332092285156, 41.960702766608314],
           [-83.27018737792969, 41.944872446874925],
           [-83.29490661621094, 41.950490107133966],
           [-83.33404541015625, 41.93465725090287],
           [-83.49197387695312, 41.75223286358822],
           [-83.5235595703125, 41.68900178362796],
           [-83.38269149625899, 41.67834406392046],
           [-83.21245063166418, 41.634908703779324],
           [-83.04252616044181, 41.55837403235949],
           [-82.96749843202002, 41.50737695522362]]],
         [[[-82.78953552246094, 42.001345689029755],
           [-82.72293090820312, 42.02226316652626],
           [-82.73391723632812, 42.03654432002706],
           [-82.79983520507812, 42.00848901572399]]]]),
    suspected1994 = /* color: ff00ff */ee.Geometry.MultiPolygon(
        [[[[-82.85202026367188, 41.51166241770766],
           [-82.81219482421875, 41.57025176609894],
           [-82.83554077148438, 41.5969591019372],
           [-82.869873046875, 41.590796851056005],
           [-82.87261962890625, 41.54250553376699],
           [-82.935791015625, 41.509605687197975]]],
         [[[-83.06900024414062, 41.576415977892665],
           [-83.0401611328125, 41.58463401188338],
           [-83.05526733398438, 41.602093861604665],
           [-83.08685302734375, 41.590796851056005]]],
         [[[-83.25714111328125, 41.643157230235204],
           [-83.19671630859375, 41.62776153144345],
           [-83.18435668945312, 41.631867410697474],
           [-83.18435668945312, 41.64213096472802],
           [-83.20632934570312, 41.648288312595355],
           [-83.22418212890625, 41.64726212881368],
           [-83.24203491210938, 41.65341898632251]]],
         [[[-83.15689086914062, 41.61800902016828],
           [-83.11569213867188, 41.611848779396745],
           [-83.11637878417969, 41.618522347008295],
           [-83.14865112304688, 41.62108891992072]]],
         [[[-83.38760375976562, 41.67598909594535],
           [-83.35052490234375, 41.66675682554943],
           [-83.3258056640625, 41.70777900286713],
           [-83.33267211914062, 41.72623044860004],
           [-83.35601806640625, 41.71905551584262]]],
         [[[-83.52630615234375, 41.68932225997044],
           [-83.4246826171875, 41.67393759473021],
           [-83.39447021484375, 41.69855129353962],
           [-83.40957641601562, 41.750824135532895],
           [-83.40408325195312, 41.772335885269165],
           [-83.38897705078125, 41.79179268262892],
           [-83.36700439453125, 41.81226714359981],
           [-83.36288452148438, 41.83273506215261],
           [-83.34228515625, 41.8470587121219],
           [-83.34365844726562, 41.85933357450052],
           [-83.3038330078125, 41.89512180073503],
           [-83.27362060546875, 41.920672548686824],
           [-83.2598876953125, 41.92271616673925],
           [-83.243408203125, 41.94110578381598],
           [-83.22418212890625, 41.95131994679697],
           [-83.1884765625, 41.95131994679697],
           [-83.18572998046875, 41.970722347928096],
           [-83.16513061523438, 41.96459591213679],
           [-83.13766479492188, 41.98501507352482],
           [-83.14247131347656, 42.00032514831621],
           [-83.12393188476562, 42.02430352774402],
           [-83.10539245605469, 42.018692376843845],
           [-83.12461853027344, 41.99573251255605],
           [-83.07380676269531, 41.93957351822694],
           [-83.03672790527344, 41.95489451722692],
           [-83.01887512207031, 41.98552546868188],
           [-82.96737670898438, 41.98297345197973],
           [-82.91656494140625, 41.96561702568285],
           [-82.85476684570312, 41.97582726102573],
           [-82.80601501464844, 41.98501507352482],
           [-82.76275634765625, 41.99879430655654],
           [-82.73117065429688, 42.00542768820574],
           [-82.694091796875, 41.99675312692372],
           [-82.65632629394531, 42.00083542071894],
           [-82.56912231445312, 41.92578147109541],
           [-82.5457763671875, 41.99522219923444],
           [-82.60139465332031, 42.03807425331983],
           [-82.70164489746094, 42.042663832203154],
           [-82.82249450683594, 42.0064481470799],
           [-82.93647766113281, 41.98501507352482],
           [-83.03604125976562, 42.03858422289915],
           [-83.10745239257812, 42.05541092308216],
           [-83.10470581054688, 42.14151415924112],
           [-83.11912536621094, 42.24275208539065],
           [-83.13148498535156, 42.25393426299183],
           [-83.15277099609375, 42.237160253267575],
           [-83.20152282714844, 42.086503089329334],
           [-83.19328308105469, 42.06101883271297],
           [-83.21868896484375, 42.02430352774402],
           [-83.22212219238281, 42.002876469410495],
           [-83.25164794921875, 41.98297345197973],
           [-83.27156066894531, 41.94110578381598],
           [-83.28941345214844, 41.94723447797777],
           [-83.33198547363281, 41.9400842775143],
           [-83.36700439453125, 41.884387437207835],
           [-83.46931457519531, 41.794864268833145]]]]),
    suspected1997 = /* color: ff9999 */ee.Geometry.Polygon(
        [[[-83.50296020507812, 41.73545418490726],
          [-83.48785400390625, 41.68932225997044],
          [-83.35739135742188, 41.67598909594535],
          [-83.32717895507812, 41.69957665997156],
          [-83.31344604492188, 41.66983439613616],
          [-83.19671630859375, 41.62776153144345],
          [-83.0731201171875, 41.597986086554684],
          [-82.99896240234375, 41.521945090086476],
          [-82.89321899414062, 41.50549203014924],
          [-82.83004760742188, 41.54353338440556],
          [-82.80670166015625, 41.58052512561384],
          [-82.83575667108846, 41.58120640714351],
          [-83.31344604492188, 41.829665291469354],
          [-83.42742919921875, 41.83273506215261]]]),
    suspected2001 = /* color: 99ff99 */ee.Geometry.Polygon(
        [[[-83.00308227539062, 41.519888686301904],
          [-82.89047241210938, 41.513719082873486],
          [-82.83279418945312, 41.54353338440556],
          [-82.82180786132812, 41.56100434546153],
          [-82.76824951171875, 41.63597302844412],
          [-82.7764892578125, 41.69855129353962],
          [-82.81219482421875, 41.72725537359254],
          [-82.83416748046875, 41.7200805552871],
          [-82.83554077148438, 41.62673502076991],
          [-82.847900390625, 41.61441561788573],
          [-82.88497924804688, 41.62365539068639],
          [-83.199462890625, 41.77028745790556],
          [-83.287353515625, 41.852173524388824],
          [-83.15826416015625, 42.01359090088998],
          [-83.21868896484375, 42.062548176663405],
          [-83.2763671875, 41.9400842775143],
          [-83.33541870117188, 41.94110578381598],
          [-83.375244140625, 41.879786443521795],
          [-83.47412109375, 41.79179268262892],
          [-83.5235595703125, 41.703677962211366],
          [-83.33267211914062, 41.66778269875833],
          [-83.08685302734375, 41.59182393372352]]]),
    suspected2004 = /* color: 9999ff */ee.Geometry.MultiPolygon(
        [[[[-83.00582885742188, 41.52091689636249],
           [-82.88909912109375, 41.51166241770766],
           [-82.83004760742188, 41.541477666790286],
           [-82.76687622070312, 41.63802573925078],
           [-82.76824951171875, 41.70675376722692],
           [-82.8204345703125, 41.69547509615208],
           [-82.83828735351562, 41.63802573925078],
           [-82.913818359375, 41.643157230235204],
           [-82.94265747070312, 41.78360106648078],
           [-83.22967529296875, 41.777456667491066],
           [-83.31756591796875, 41.90432124806034],
           [-83.21731567382812, 41.932933275212996],
           [-83.15963745117188, 42.02787400232195],
           [-83.02780151367188, 42.01359090088998],
           [-82.98797607421875, 41.99726342796974],
           [-82.96051025390625, 42.01461122881795],
           [-83.1280517578125, 42.06356771883279],
           [-83.37936401367188, 41.923737951220986],
           [-83.50982666015625, 41.75799552006108],
           [-83.25576782226562, 41.64931448003169],
           [-83.17611694335938, 41.620575613509956],
           [-83.10745239257812, 41.60414765107674],
           [-83.09234619140625, 41.566141964768384]]],
         [[[-82.89321899414062, 41.999304591234996],
           [-82.89047241210938, 41.97991089691236],
           [-82.83279418945312, 41.98093176496803],
           [-82.75863647460938, 42.011550195928606],
           [-82.69134521484375, 42.023793443577986],
           [-82.6446533203125, 42.0268538871898],
           [-82.60208129882812, 42.01461122881795],
           [-82.55264282226562, 41.98399427093563],
           [-82.54302978515625, 41.99420156031571],
           [-82.59796142578125, 42.032974332441405],
           [-82.61581420898438, 42.042153895364],
           [-82.71194458007812, 42.04113400940809],
           [-82.81631469726562, 42.00542768820574]]]]),
    suspected2006 = /* color: ffff99 */ee.Geometry.Polygon(
        [[[-83.0072021484375, 41.52091689636249],
          [-82.89047241210938, 41.509605687197975],
          [-82.82867431640625, 41.545589036668105],
          [-82.76824951171875, 41.63597302844412],
          [-82.74490356445312, 41.703677962211366],
          [-82.76138305664062, 41.75287318430239],
          [-82.9248046875, 41.721105578381525],
          [-83.00033569335938, 41.595932100977876],
          [-83.03741455078125, 41.66367910784373],
          [-83.01544189453125, 41.7241805495636],
          [-83.09234619140625, 41.8439896284622],
          [-82.90420532226562, 41.90840946591109],
          [-82.9962158203125, 41.96663812286332],
          [-83.10745239257812, 41.878763955489404],
          [-83.25714111328125, 41.897166236893334],
          [-83.37661743164062, 41.822501920711076],
          [-83.38897705078125, 41.88694340165636],
          [-83.23654174804688, 41.94212727375355],
          [-83.22967529296875, 41.97889001249024],
          [-83.1829833984375, 41.99522219923444],
          [-83.16787719726562, 42.02583375568838],
          [-83.12942504882812, 42.04011410708205],
          [-82.98110961914062, 42.00032514831621],
          [-82.96600341796875, 42.011550195928606],
          [-83.0181884765625, 42.032974332441405],
          [-83.133544921875, 42.05948945192713],
          [-83.18984985351562, 42.03195429915655],
          [-83.21182250976562, 42.00032514831621],
          [-83.25439453125, 41.988077383091586],
          [-83.309326171875, 41.933954896061614],
          [-83.41506958007812, 41.89512180073503],
          [-83.53042602539062, 41.71187978193456],
          [-83.353271484375, 41.67086022030498],
          [-83.32992553710938, 41.690347773537894],
          [-83.28460693359375, 41.65649719441145],
          [-83.10470581054688, 41.59285100004953]]]),
    suspected2007 = /* color: 99ffff */ee.Geometry.MultiPolygon(
        [[[[-82.96737670898438, 41.51166241770766],
           [-82.88497924804688, 41.50652046891492],
           [-82.83004760742188, 41.54353338440556],
           [-82.81219482421875, 41.572306568724365],
           [-82.8369140625, 41.59182393372352],
           [-82.85202026367188, 41.55586631766996],
           [-82.87811279296875, 41.5538109921796],
           [-82.89047241210938, 41.536338086837624],
           [-82.93304443359375, 41.55175560133366],
           [-82.96051025390625, 41.549700145132725],
           [-83.05801391601562, 41.63597302844412],
           [-83.1829833984375, 41.65547114139424],
           [-83.25851440429688, 41.700602010054794],
           [-83.27362060546875, 41.81329069491422],
           [-83.43017578125, 41.78872094923209],
           [-83.38348388671875, 41.86240192202145],
           [-83.32992553710938, 41.87774145109677],
           [-83.31207275390625, 41.933954896061614],
           [-83.29559326171875, 41.93804121581888],
           [-83.25714111328125, 41.92884662818317],
           [-83.23516845703125, 41.96970131621059],
           [-83.199462890625, 41.98093176496803],
           [-83.16787719726562, 42.018692376843845],
           [-83.12530517578125, 42.03807425331983],
           [-83.00308227539062, 42.009509425493796],
           [-82.9742431640625, 42.017672114390415],
           [-83.11019897460938, 42.05439124994332],
           [-83.10745239257812, 42.15220521114358],
           [-83.10195922851562, 42.26003279710111],
           [-83.11981201171875, 42.261049162113856],
           [-83.12942504882812, 42.053371560433604],
           [-83.18984985351562, 42.03093424950211],
           [-83.18710327148438, 42.0125705565935],
           [-83.20632934570312, 41.99828401778616],
           [-83.22967529296875, 41.99828401778616],
           [-83.26126098632812, 41.97991089691236],
           [-83.265380859375, 41.94417020453617],
           [-83.30108642578125, 41.94825586972943],
           [-83.331298828125, 41.93906275484857],
           [-83.33953857421875, 41.881831370505594],
           [-83.39584350585938, 41.86751550737105],
           [-83.45489501953125, 41.80203073088394],
           [-83.51943969726562, 41.703677962211366],
           [-83.463134765625, 41.67188602812697],
           [-83.35052490234375, 41.67188602812697],
           [-83.32443237304688, 41.6944496643259],
           [-83.29971313476562, 41.66470503009207],
           [-83.16375732421875, 41.611335399441735],
           [-83.08822631835938, 41.599013054830216],
           [-83.04153442382812, 41.55072788140255]]],
         [[[-82.80120849609375, 42.0125705565935],
           [-82.7874755859375, 42.001345689029755],
           [-82.72430419921875, 42.019712622928495],
           [-82.73117065429688, 42.036034334077875]]],
         [[[-82.6171875, 42.03807425331983],
           [-82.6171875, 42.03093424950211],
           [-82.53067016601562, 41.96051129429776],
           [-82.51693725585938, 41.96765920367816],
           [-82.5787353515625, 42.02889410108476]]]]),
    suspected2010 = /* color: ff99ff */ee.Geometry.Polygon(
        [[[-83.0072021484375, 41.52502957323801],
          [-82.88909912109375, 41.50549203014924],
          [-82.82867431640625, 41.54044978347556],
          [-82.81356811523438, 41.57025176609894],
          [-82.83554077148438, 41.58771550500517],
          [-82.86849975585938, 41.58155237169248],
          [-82.8863525390625, 41.53428214049227],
          [-82.9248046875, 41.54456121870596],
          [-82.9852294921875, 41.546616838291946],
          [-83.02230834960938, 41.559976772581706],
          [-83.06350708007812, 41.6154423246811],
          [-83.2598876953125, 41.67701482203219],
          [-83.309326171875, 41.76516610331408],
          [-83.27911376953125, 41.80919639152055],
          [-83.26400756835938, 41.83273506215261],
          [-83.23654174804688, 41.88694340165636],
          [-83.22280883789062, 41.899210607606115],
          [-83.12393188476562, 41.88898809959183],
          [-83.111572265625, 41.919650715116326],
          [-83.12942504882812, 41.97276436226531],
          [-83.0841064453125, 42.02991418347818],
          [-82.935791015625, 41.96868026812728],
          [-82.90145874023438, 41.96357478222518],
          [-82.68310546875, 42.018692376843845],
          [-82.60757446289062, 41.99828401778616],
          [-82.54989624023438, 41.97889001249024],
          [-82.5457763671875, 41.99420156031571],
          [-82.58148193359375, 42.02889410108476],
          [-82.66387939453125, 42.042153895364],
          [-82.75039672851562, 42.036034334077875],
          [-82.81906127929688, 42.004407212963585],
          [-82.9248046875, 41.988077383091586],
          [-83.02642822265625, 42.03093424950211],
          [-83.10882568359375, 42.05541092308216],
          [-83.11019897460938, 42.14915080911932],
          [-83.1060791015625, 42.2508847747757],
          [-83.1280517578125, 42.26308184299127],
          [-83.15277099609375, 42.24275208539065],
          [-83.15963745117188, 42.18782901059085],
          [-83.19534301757812, 42.115542659613865],
          [-83.199462890625, 42.05031239367958],
          [-83.22418212890625, 42.0033867213535],
          [-83.2049560546875, 41.94314874732696],
          [-83.2379150390625, 41.937019660425264],
          [-83.25714111328125, 41.95131994679697],
          [-83.31069946289062, 41.953362583018475],
          [-83.3642578125, 41.91760699888703],
          [-83.38760375976562, 41.89001042401825],
          [-83.41781616210938, 41.83273506215261],
          [-83.47137451171875, 41.79384042311992],
          [-83.51669311523438, 41.70470324689897],
          [-83.507080078125, 41.68727118379141],
          [-83.3258056640625, 41.67086022030498],
          [-83.07586669921875, 41.58463401188338],
          [-83.023681640625, 41.546616838291946]]]),
    WB_boundary = /* color: d63000 */ee.Geometry.LineString(
        [[-82.8204345703125, 41.571279175581715],
         [-82.76275634765625, 41.68111756290652],
         [-82.6885986328125, 41.75184866809371],
         [-82.62954711914062, 41.82045509614032],
         [-82.5238037109375, 41.955405153780596]]),
    WB_boundary2 = /* color: 98ff00 */ee.Geometry.LineString(
        [[-82.82069206237793, 41.570926005415046],
         [-82.76276171207428, 41.68111355645122],
         [-82.68808364868164, 41.75252100870006],
         [-82.68812656402588, 41.753609545226986],
         [-82.68842697143555, 41.75421783701048],
         [-82.68851280212402, 41.754954182509],
         [-82.68902778625488, 41.756042677771894],
         [-82.68889904022217, 41.75745129129722],
         [-82.68902778625488, 41.75831565247217],
         [-82.68919944763184, 41.75857175725127],
         [-82.68902778625488, 41.75953214107035],
         [-82.68937110900879, 41.76209309432243],
         [-82.68934965133667, 41.762973398397904],
         [-82.68937110900879, 41.763661627717624],
         [-82.68889904022217, 41.765646247674255],
         [-82.68881320953369, 41.76759879772097],
         [-82.68907070159912, 41.769199204262456],
         [-82.6891565322876, 41.770479500749694],
         [-82.68842697143555, 41.774608282838464],
         [-82.68846988677979, 41.77521637557563],
         [-82.68808364868164, 41.77736065658546],
         [-82.68795490264893, 41.779280847388364],
         [-82.68761157989502, 41.7816490035295],
         [-82.68722534179688, 41.78177700947813],
         [-82.68671035766602, 41.78363306701768],
         [-82.68619537353516, 41.78702503335673],
         [-82.68645286560059, 41.78734502091796],
         [-82.68465042114258, 41.799855282476166],
         [-82.68439292907715, 41.80548570302699],
         [-82.68447875976562, 41.80862060911785],
         [-82.68507957458496, 41.81156344258336],
         [-82.68610954284668, 41.81181933475655],
         [-82.68756866455078, 41.81284289322674],
         [-82.68683910369873, 41.81428224465265],
         [-82.68598079681396, 41.81469805126505],
         [-82.68550872802734, 41.815593625569505],
         [-82.68409252166748, 41.81588148607933],
         [-82.68340587615967, 41.81610537669246],
         [-82.6827621459961, 41.81604140802572],
         [-82.68211841583252, 41.81607339236708],
         [-82.68035888671875, 41.8148259912181],
         [-82.67971515655518, 41.81421827416499],
         [-82.67911434173584, 41.81377047896245],
         [-82.67829895019531, 41.813066794461804],
         [-82.67849206924438, 41.81301881569161],
         [-82.67849206924438, 41.81248305031637],
         [-82.67802000045776, 41.8118833076401],
         [-82.67751574516296, 41.81153945263972],
         [-82.67652869224548, 41.81117160571208],
         [-82.6759546995163, 41.810511874952475],
         [-82.6756489276886, 41.81034394240151],
         [-82.67521440982819, 41.81022798871649],
         [-82.67504274845123, 41.81020399827272],
         [-82.6744955778122, 41.80998008703078],
         [-82.67416298389435, 41.809788162486164],
         [-82.67399668693542, 41.80964022025727],
         [-82.67330467700958, 41.80937232400026],
         [-82.67265558242798, 41.809252370089226],
         [-82.67190456390381, 41.80919639152055],
         [-82.67138957977295, 41.80916440374506],
         [-82.67043471336365, 41.809252370089226],
         [-82.66938328742981, 41.8090444494447],
         [-82.66846060752869, 41.80912441900324],
         [-82.66708731651306, 41.809340336312616],
         [-82.66654014587402, 41.80934833323604],
         [-82.66449093818665, 41.80971619063371],
         [-82.66385793685913, 41.80986013425778],
         [-82.66145467758179, 41.810699798951816],
         [-82.65902996063232, 41.81207522590748],
         [-82.6585578918457, 41.81221916423063],
         [-82.65782833099365, 41.81242707457085],
         [-82.6575493812561, 41.81269895630516],
         [-82.65712022781372, 41.81269895630516],
         [-82.65624046325684, 41.81266697027869],
         [-82.65312910079956, 41.814778013765654],
         [-82.65066146850586, 41.81677704383583],
         [-82.64898777008057, 41.81828027334614],
         [-82.64834403991699, 41.81860010485984],
         [-82.6466703414917, 41.82058302459279],
         [-82.64581203460693, 41.82099879029827],
         [-82.64568328857422, 41.823717191843684],
         [-82.6429796218872, 41.823525308461456],
         [-82.64345169067383, 41.82119068125185],
         [-82.64100551605225, 41.82221408995921],
         [-82.63787269592285, 41.82183031361076],
         [-82.63388156890869, 41.81981545004444],
         [-82.63280868530273, 41.816457203217496],
         [-82.5238037109375, 41.95527749502571]]),
    img_boundary_west1984 = /* color: 0B4A8B */ee.Geometry.LineString(
        [[-83.15369367599487, 42.74031482668021],
         [-83.65170478820801, 41.14518192605014]]),
    img_boundary_east1985 = /* color: ffc82d */ee.Geometry.LineString(
        [[-82.34458923339844, 42.391337450255534],
         [-82.89424896240234, 40.80447363497388]]),
    img_boundary_east1986 = /* color: 00ffff */ee.Geometry.LineString(
        [[-82.94506072998047, 40.81440604685486],
         [-82.39608764648438, 42.40220210275167]]),
    img_boundary_east1987 = /* color: bf04c2 */ee.Geometry.LineString(
        [[-82.77786254882812, 40.779655903827425],
         [-82.2191047668457, 42.36839269292304]]),
    img_boundary_east1988 = /* color: ff0000 */ee.Geometry.LineString(
        [[-82.89012908935547, 40.79335589422502],
         [-82.33549118041992, 42.38716044658731]]),
    img_boundary_east1989 = /* color: 00ff00 */ee.Geometry.LineString(
        [[-82.9409408569336, 40.81319819881078],
         [-82.38784790039062, 42.410865735703865]]),
    img_boundary_west1990 = /* color: 0000ff */ee.Geometry.LineString(
        [[-83.55239868164062, 41.115390845430674],
         [-83.05337905883789, 42.72243478563898]]),
    img_boundary_east1991 = /* color: 999900 */ee.Geometry.LineString(
        [[-82.8782844543457, 40.78954836845958],
         [-82.32158660888672, 42.389886376624055]]),
    img_boundary_east1993 = /* color: 009999 */ee.Geometry.LineString(
        [[-82.85579681396484, 40.79439556464299],
         [-82.29755401611328, 42.39878296076623]]),
    img_boundary_east1995 = /* color: ff00ff */ee.Geometry.LineString(
        [[-82.97733306884766, 40.80972881214433],
         [-82.42355346679688, 42.41783617521938]]),
    img_boundary_east1996 = /* color: ff9999 */ee.Geometry.LineString(
        [[-82.7267074584961, 40.757920208794026],
         [-82.16194152832031, 42.368564108787496]]),
    img_boundary_east1997 = /* color: 99ff99 */ee.Geometry.LineString(
        [[-82.78541564941406, 40.769270378757064],
         [-82.22305297851562, 42.38014201880932]]),
    img_boundary_west1998 = /* color: 9999ff */ee.Geometry.LineString(
        [[-83.4796142578125, 41.12388751058799],
         [-82.97407150268555, 42.74621148439214]]),
    img_boundary_west1999 = /* color: ffff99 */ee.Geometry.LineString(
        [[-83.61488342285156, 41.115390845430674],
         [-83.11088562011719, 42.7382247124953]]),
    img_boundary_west2000 = /* color: 99ffff */ee.Geometry.LineString(
        [[-83.53042602539062, 41.102792338484996],
         [-83.02350997924805, 42.7278853924793]]),
    img_boundary_east2001 = /* color: ff99ff */ee.Geometry.LineString(
        [[-82.90695190429688, 40.79317313797692],
         [-82.34458923339844, 42.40955374107194]]),
    img_boundary_east2010 = /* color: d63000 */ee.Geometry.LineString(
        [[-82.28931427001953, 42.38340120281852],
         [-82.84034729003906, 40.79665760379583]]),
    img_boundary_east2010_gtb = /* color: 98ff00 */ee.Geometry.LineString(
        [[-82.86849975585938, 40.80129515221751],
         [-82.31746673583984, 42.38894043684361]]),
    img_boundary_west2011 = /* color: 0B4A8B */ee.Geometry.LineString(
        [[-83.58226776123047, 41.12410774245512],
         [-83.08719635009766, 42.71801138812346]]),
    img_boundary_west2011_gtb = /* color: ffc82d */ee.Geometry.LineString(
        [[-83.62552642822266, 41.129797146235184],
         [-83.13285827636719, 42.724569273725855]]),
    img_boundary_west2011_nir = /* color: 00ffff */ee.Geometry.LineString(
        [[-83.60733032226562, 41.12695250600846],
         [-83.11431884765625, 42.72248848125474]]),
    img_boundary_east2003 = /* color: bf04c2 */ee.Geometry.LineString(
        [[-82.81700134277344, 40.785220723422235],
         [-82.26356506347656, 42.37249564598936]]),
    img_boundary_west2004 = /* color: ff0000 */ee.Geometry.LineString(
        [[-83.51188659667969, 41.120228320681306],
         [-83.0126953125, 42.71422767728687]]),
    img_boundary_west2005 = /* color: 00ff00 */ee.Geometry.LineString(
        [[-83.60252380371094, 41.13652035105814],
         [-83.10522079467773, 42.729613329442145]]),
    img_boundary_east2009 = /* color: 0000ff */ee.Geometry.LineString(
        [[-82.79966354370117, 40.79158922942079],
         [-82.24742889404297, 42.37668056033978]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// 17. Reflectance Amount

// META PARAMETER ---------------------------------------------------------------------------------
var testingSingleImage = 1; //binary; sets parameters to look at one image
var customDates = 0;        //binary; when you want custom dates intead of 7/1 to 10/31
var download = 1;           //binary; sets whether or not you want to download the output.
var flatten = 1;             //binary: sets whether, if you download the output, you want the 
                            // TC in the background
var exportFolder = 'LakeErieGEE'; // csv files automatically go to LakeErieGEE_csv, this is for images

// CODE PARAMETERS --------------------------------------------------------------------------------
var startyr = 2002; //year for visualization
var endyr = 2011;
var inst = 5; //instrument number; 5=LANDSAT 5 TM; 7=LANDSAT 7 ETM+
var input = 2; // 3: uses the SR inputs to calculate the algorithms
               // 2: uses the TOA inputs to calculate the algorithms
               // 1: calculates DO-subtracted spectral radiance as inputs
               // 0: uses the raw DNs

//algorithm: 1=Vincent2004; 2=Duan2009; 3=Stumpf(0) 
// 4=Stumpf(1); 5=Stumpf(2)=NIRoverRedWithSAC; 6=Stumpf(3);
// 7=Stumpf(3b); 8=Stumpf(4); 9=Stumpf(5)=highchla1=RedToBlue
// 10=highchla2; 11=lowchla1=GreenToBlue; 12=lowchla2;
// 13=Vincent2004 (for thresholding)
var alg = 3; // (order for paper Table 1: 1,9,2,3,4,5,8,6)
var addGreen=1; // whether to add 'greenness' filter to algorithm
var analysis = 2; //type of analysis: 1=summing up over whole regions (Stumpf comparison); 
                  // 2=point summation (Brigeman comparison)
                  // 3=whole regions but for each individual image; 
                  // 4=locations from literature
                  // 5=chl-a locations from EPA; 6=EC

var visualize = 0;  //whether or not to visualize
var truecolor = 0;  //if visualizing, whether or not to display the true color image
var tcmask = 0;       // sets whether or not the bloom will be overlaid on truecolor
var testThresh = 1; //whether or not testing algorithm with threshold

var res = 30; //resolution of reduceRegion for summing over regions for analysis=1,analysis=3
var focal = 0;  //whether or not to use a focal indicator for cloud masking, 1=yes, 0= no. Runs faster if no.
var singleDate = null; //for single image results, put a date; null otherwise
var sumArea = 'ringWB'; // the geometry used to sum bloom amounts and areas
                        // 'ringWB': crudely drawn polygon
                        // 'hddpoly': using the more precise hand-drawn polygon
                        // 'GLWD1' : GLWD1 polygon
                        // 'NApoly': using the NA polygon negative space
                        // 'MODISlc': using the opposite of the MODIS land cover 'land' designation
                        // 'GLWD3' : GLWD3 raster turned into polygon

if (testingSingleImage==1) {
  endyr = startyr; //determines the number of loops, so endyr=startyr does only one
  analysis = 0;
  visualize = 1;
  truecolor = 1; 
  tcmask = 0; 
  testThresh = 0;
  var fitThreshold = 0; // If you want to fit the threshold on the 2011/09/03 image
  if (fitThreshold==1) {
    var merisExtent = 2063.05; // the meris Extent from 2011/09/03
    testThresh = 0; // need the output image to be continuous to apply different thresholds
  }
  var singleDateString = "1991-9-3";  
  singleDate = new Date(singleDateString); //for single image results, put a date; null otherwise
  var susp_dict = {
    '1984':suspected1984,
    '1985':suspected1985,
    '1986':suspected1986,
    '1987':suspected1986,
    '1988':suspected1988,
    '1989':suspected1988,
    '1990':suspected1990,
    '1991':suspected1991,
    '1992':suspected1992,
    '1993':suspected1993,
    '1994':suspected1994,
    '1995':suspected1993,
    '1996':suspected1993,
    '1997':suspected1997,
    '1998':suspected1990,
    '1999':suspected1992,
    '2000':suspected1993,
    '2001':suspected2001,
    '2002':suspected1993,
    '2003':suspected1993,
    '2004':suspected2004,
    '2005':suspected1997,
    '2006':suspected2006,
    '2007':suspected2007,
    '2008':suspected1991,
    '2009':suspected1991,
    '2010':suspected2010,
    '2011':suspected1991
  };
  var suspected = susp_dict[singleDateString.substr(0,4)]; //select your own suspected polygon
  suspected = geometry; // uncomment this line if you don't want to color the clouds yellow
  var bdy_dict = {
    '1984':img_boundary_west1984,
    '1985':img_boundary_east1985,
    '1986':img_boundary_east1986,
    '1987':img_boundary_east1987,
    '1988':img_boundary_east1988,
    '1989':img_boundary_east1989,
    '1990':img_boundary_west1990,
    '1991':img_boundary_east1985, //%east1985 if 1991 S1 image (1991-9-3)
    '1992':img_boundary_east1989,
    '1993':img_boundary_east1993,
    '1994':img_boundary_east1989,
    '1995':img_boundary_east1995,
    '1996':img_boundary_east1996,
    '1997':img_boundary_east1997,
    '1998':img_boundary_west1998,
    '1999':img_boundary_west1999,
    '2000':img_boundary_west2000,
    '2001':img_boundary_east2001,
    '2002':img_boundary_east1991,
    '2003':img_boundary_east2003,
    '2004':img_boundary_west2004,
    '2005':img_boundary_west2005,
    '2006':img_boundary_west1990,
    '2007':img_boundary_east1997,
    '2008':img_boundary_east1985,
    '2009':img_boundary_east2009,
    '2010':img_boundary_east2010,
    '2011':img_boundary_west2011
  };
}
else if (customDates==1) {
  visualize = 0; 
  truecolor = 0;
  var firstday = "/8/1";
  var secondday = "/8/31";
}

switch(input)
{
  case 0:
    var threshold2 = 13;  //Threshold for Band4 "bloom" (alg2)
    var threshold3 = 6;  //Threshold for Band4-Band5 "bloom" (alg3)
    var threshold4 = -10;  //Threshold for Band4-Band3 "bloom" (alg4)
    var threshold5 = 0.30;  //Threshold for (Band4-Band5)/(Band3-Band5) "bloom" (alg5)
    var threshold6 = -2.5;  //Threshold for (Band4-Band3)+(Band3-Band5)*0.5 "bloom" (alg6)
    var threshold7 = -0.675;  //Threshold for (Band4-Band3)/(Band3-Band5) "bloom" (alg7)
    var threshold8 = 1.1322;  //Threshold for (Band4-B4line)/(Band3-B3line) "bloom" (alg8)
    var threshold9 = 0.29;  //Threshold for (Band3)/(Band1) "bloom" (alg9)
    var thresholds = [null, null, threshold2, threshold3, threshold4, 
      threshold5, threshold6, threshold7, threshold8, threshold9,
      null, null, null, 5.922/*,4.43*/];
    var input_string = '';
    break;
  case 1:
    var input_string = '_LminusDO';
    break;
  case 2:
    // Thresholds for TOA with indices matching alg variable (=>first three indices not used):
    var thresholds = [null, null, 0.032725, /*0.0212,0.0305,0.027725*/0.02346, 0.0247, 
      0.4945, 0.0259, 1, 1.134, /*0.572*/0.462, 1.8, 0.8405/*0.816*/, 1];
    var input_string = '_TOA';
    break;
  case 3:
      // Thresholds for SR with indices matching alg variable (=>first three indices not used):
    var thresholds = [null, null, 135]; 
    var input_string = '_SR';
    break;
}

// FUNCTIONS --------------------------------------------------------------------------------------

// Implements the Automatic Cloud Cover Assessment, with some changes
// http://landsathandbook.gsfc.nasa.gov/pdfs/ACCA_SPIE_paper.pdf
var calcACCA = function(image) {
  var f1 = image.select('B3').lt(0.08); // B3 below 0.08 is non-cloud
  var f2 = image.normalizedDifference(['B2','B5']).gt(0.7); // (B2-B5)/(B2+B5) above 0.7 is non-cloud
  var f3 = image.select('B6').gt(300); // B6 above this is non-cloud
  
  var f4 = image.expression("( 1 - b('B5') ) * b('B6')").gt(225); // (1-B5)*B6 above this is ambiguous
  var f5 = image.expression("b('B4') / b('B3')").gt(2.0); // B4/B3 above this is ambiguous
  var f6 = image.expression("b('B4') / b('B2')").gt(2.0); // B4/B2 above this is ambiguous
  var f7 = image.expression("b('B4') / b('B5')").lt(1.0); // B4/B5 below this is ambiguous 
  
  // Note: snow not expected in these summer scenes, so filter 8 not used
  //var f8 = image.expression("b('b5') / b('b6')").gt(210); // B5/B6 above this is warm cloud (below is cold cloud)
  
  //ACCA Pass One
  var nonclouds = f1.or(f2).or(f3);
  var ambiguous = nonclouds.not().and(f4.or(f5).or(f6).or(f7));
  var clouds = nonclouds.not().and(ambiguous.not());
  
  /* Do not implement Pass Two here because of quota exceedance: too many aggregations
  //ACCA Pass Two
  
  // No check for desert or snow because not expected in these scenes
  // Also no adjustment for skewness because no skewness reducer in GEE
  var meanTemp = image.select('B6').mask(clouds).reduceRegion({
        reducer: ee.Reducer.mean(),
        bestEffort: true});
  var p975 = ee.Image(ee.Number(
        image.select('B6').mask(clouds).reduceRegion({
          reducer: ee.Reducer.percentile([97.5]),
          bestEffort: true}).get('B6')
        ));
  var p835 = ee.Image(ee.Number(
        image.select('B6').mask(clouds).reduceRegion({
          reducer: ee.Reducer.percentile([83.5]),
          bestEffort: true}).get('B6')
        ));
  
  var amb_temps = image.select('B6').mask(ambiguous); // get ambiguous temps
  var toAreaKM = ee.Image(30*30/1000/1000);
  var L5_TM_footprint = ee.Image(170*183); //http://landsat.usgs.gov/band_designations_landsat_satellites.php
  
  var uppThermalEffect = amb_temps.lt(p975).and(amb_temps.gt(p835));
  var upp_portion = ee.Image(ee.Number(
        uppThermalEffect.reduceRegion({
          reducer: ee.Reducer.sum(),
          bestEffort: true}).get('B6')
        )).multiply(toAreaKM).divide(L5_TM_footprint);
  var upp_meantemp = ee.Image(ee.Number(
        amb_temps.reduceRegion({
          reducer: ee.Reducer.mean(),
          bestEffort: true}).get('B6')
        ));
  
  var lowThermalEffect = amb_temps.lt(p835);
  var low_portion = ee.Image(ee.Number(
        lowThermalEffect.reduceRegion({
          reducer: ee.Reducer.sum(),
          bestEffort: true}).get('B6')
        )).multiply(toAreaKM).divide(L5_TM_footprint);
  var low_meantemp = ee.Image(ee.Number(
        amb_temps.reduceRegion({
          reducer: ee.Reducer.mean(),
          bestEffort: true}).get('B6')
        ));
  
  // Both thermal effect classes become cloud pixels if upper mean < 295K AND
  //  upper thermal effect portion of scene < 0.4
  var ambClouds = (uppThermalEffect.or(lowThermalEffect))
    .multiply(upp_meantemp.lt(295)).multiply(upp_portion.lt(0.4));
  
  // Only lower thermal effect class becomes cloud pixels if low mean < 295K AND
  //  lower thermal effect portion of scene < 0.4
  var ambClouds2 = lowThermalEffect
    .multiply(low_meantemp.lt(295)).multiply(low_portion.lt(0.4));
  
  // Unite ambiguous cloud designations with previous clouds
  clouds = clouds.or(ambClouds.unmask()).or(ambClouds2.unmask());*/
  
  // To be conservative, ambiguous pixels are treated as clouds
  // Meaning that only the first three thresholds are used.
  // For a slightly less conservative treatment, use the 4th threshold:
  // By visual analysis, it appears to match well with simpleCloudScore().
  //clouds = (f1.or(f2).or(f3)).not(); //consClouds
  clouds = (f1.or(f2).or(f3)).not()
  
  return image.addBands(clouds.rename('cloud'));
};

//Conversion of Raw DN to spectral radiance + DO subtraction
var convertToLplusDOsubtract = function(image) {
  var Llambda = ee.Algorithms.Landsat.calibratedRadiance(image);
  var geom = image.geometry();
  var DO = Llambda.reduceRegion({
          reducer: ee.Reducer.min(),
          scale:30,
          geometry: geom,
          bestEffort: true});
  return Llambda.subtract(DO.toImage())
    .copyProperties(image,['system:time_end']);
};

//Specifies a threshold for hue to estimate green pixels
var calcGreenness = function (img) {
  var r = img.select(['B3']);
  var g = img.select(['B2']);
  var b = img.select(['B1']);
  var I = r.add(g).add(b).rename(['I']);
  var mins = r.min(g).min(b).rename(['mins']);
  var H = mins.where(mins.eq(r),
    (b.subtract(r)).divide(I.subtract(r.multiply(3))).add(1) );
  H = H.where(mins.eq(g),
    (r.subtract(g)).divide(I.subtract(g.multiply(3))).add(2) );
  H = H.where(mins.eq(b),
    (g.subtract(b)).divide(I.subtract(b.multiply(3))) );
  var Hthresh = H.lte(1.6)
  
  return Hthresh;
}


//Vincent2004 best spectral-ratio algorithm for LANDSAT 7 and 5 respectively (5 has a calibration from NOAA 2011 report)
var calculateLBPC_7 = function(image) {
  //get cloudScore for whole image (>50 = extreme clouds)
  //var yesCloud = ee.Algorithms.Landsat.simpleCloudScore(image).gte(50).select("cloud");
  var yesCloud = calcACCA(image).select("cloud");
  
  //remove clouds by making them 0:
  var img=image.where(yesCloud,0);
  
  img=image.expression("47.7-9.21*b('B3raw')/b('B1raw')"+
    "+29.7*b('B4raw')/b('B1raw')"+
    "-118*b('B4raw')/b('B3raw')"+
    "-6.81*b('B5raw')/b('B3raw')"+
    "+41.9*b('B7raw')/b('B3raw')"+
    "-14.7*b('B7raw')/b('B4raw')");
  img=img.select(["constant"],["PC"]);
 
  img = img.where(img.lte(0),0); //set <=0 phycocyanin to 0

  if (analysis!=1&&analysis!=3) {
    img=img.where(yesCloud,-1); //don't turn clouds into -1 for summing...will sum negative ones!
  }
  img=img.addBands(yesCloud);
  return (image.addBands(img).toFloat());  
};
var calculateLBPC_5 = function(image) {
  //get cloudScore for whole image (>50 = extreme clouds)
  //var yesCloud = ee.Algorithms.Landsat.simpleCloudScore(image).gte(50).select("cloud");
  var yesCloud = calcACCA(image).select("cloud");
  if (focal==1) {
    yesCloud = yesCloud.focal_max(10);
  }
  
  //remove clouds by making them 0:
  var img=image.where(yesCloud,0);
  
  img=image.expression("47.7-9.21*(2.9594+1.6203*b('B3raw'))/(2.1572+0.9198*b('B1raw'))+" +
    "29.7*(3.5046+0.8950*b('B4raw'))/(2.1572+0.9198*b('B1raw'))-" + 
    "118*(3.5046+0.8950*b('B4raw'))/(2.9594+1.6203*b('B3raw'))-" + 
    "6.81*(3.1591+1.0111*b('B5raw'))/(2.9594+1.6203*b('B3raw'))+" +
    "41.9*(2.8122+1.3984*b('B7raw'))/(2.9594+1.6203*b('B3raw'))-" + 
    "14.7*(2.8122+1.3984*b('B7raw'))/(3.5046+0.8950*b('B4raw'))");
  img=img.select(["constant"],["PC"]);
  
  img = img.where(img.lte(0),0); //set <=0 phycocyanin to 0

  if (analysis!=1&&analysis!=3) {
    img=img.where(yesCloud,-1); //don't turn clouds into -1 for summing...will sum negative ones!
  }
  img=img.addBands(yesCloud);
  return (image.addBands(img).toFloat());  
};
//Function for applying algorithms suggested by Rick Stumpf 
// (specific alg determined by alg parameter)
var calcAlgorithm = function(image) {
  //get cloudScore for whole image (>50 = extreme clouds)
  //var yesCloud = ee.Algorithms.Landsat.simpleCloudScore(image).gte(50).select("cloud");
  var yesCloud = calcACCA(image).select("cloud");
  if (focal==1) {
    yesCloud = yesCloud.focal_max(5);
  }
  //remove clouds by making them 0:
  var img=image.where(yesCloud,0);
  
  //remove land
  img=img.where(image.select("B4").gte(0.1),0);
  
  //perform Band4 thresholding as normal
  switch(alg)
  {
  case 2:
    img=img.select("B4raw");
    if (testThresh==1) {
      img=img.select("B4raw").gte(thresholds[alg]);
    }
    img=img.select(["B4raw"],["band4thresh"]);
    break;
  case 3:
    img=img.select("B4raw","B5raw");
    img=img.select('B4raw').subtract(img.select('B5raw').multiply(1.03))
    if (testThresh==1) {
      img=img.select("B4raw").gte(thresholds[alg]);
    }
    img=img.select(["B4raw"],["stumpf0"]);
    break;
  case 4:
    img=img.select("B4raw","B3raw");
    img=img.expression("b('B4raw')-b('B3raw')");
    if (testThresh==1) {
      img=img.select("B4raw").lte(thresholds[alg]);
    }
    img=img.select(["B4raw"],["stumpf1"]);
    break;
  case 5:
    img=img.select("B4raw","B3raw","B5raw");
    img=img.expression("(b('B4raw')-b('B5raw'))/(b('B3raw')-b('B5raw'))");
    if (testThresh==1) {
      img=img.select("B4raw").gte(thresholds[alg]);
    }
    img=img.select(["B4raw"],["stumpf2"]);
    break;
  case 6:
    img=img.select("B4raw","B3raw","B5raw");
    img=img.expression("(b('B4raw')-b('B3raw'))+0.5*(b('B3raw')-b('B5raw'))");
    if (testThresh==1) {
      img=img.select("B4raw").lte(thresholds[alg]);
    }
    img=img.select(["B4raw"],["stumpf3"]);
    break;
  case 7:
    img=img.select("B4raw","B3raw","B5raw");
    img=img.expression("(b('B4raw')-b('B3raw'))/(b('B3raw')-b('B5raw'))");
    if (testThresh==1) {
      img=img.select("B4raw").lte(thresholds[alg]);
    }
    img=img.select(["B4raw"],["stumpf3b"]);
    break;
  case 8:
    img=img.select("B4raw","B3raw","B5raw","B1raw");
    img=img.expression(
        "( b('B4raw')-" +
          "(b('B4raw')-b('B1raw'))+(b('B1raw')-b('B5raw'))*(850-490)/(1650-490)" +
        ") / " + 
        "( b('B3raw')-" +
          "(b('B3raw')-b('B1raw'))+(b('B1raw')-b('B5raw'))*(660-490)/(1650-490)" + 
        ")");
    if (testThresh==1) {
      img=img.select("B4raw").gte(thresholds[alg]);
    }
    img=img.select(["B4raw"],["stumpf4"]);
    break;
  case 9:
    img=img.select("B3raw","B1raw");
    img=img.expression("b('B3raw')/b('B1raw')");
    if (testThresh==1) {
      img=img.select("B3raw").gte(thresholds[alg]);
    }
    img=img.select(["B3raw"],["stumpf5"]);
    break;
  case 10:
    img=img.select("B3raw","B4raw");
    img=img.expression("b('B3raw')/b('B4raw')");
    if (testThresh==1) {
      img=img.select("B3raw").gte(thresholds[alg]);
    }
    img=img.select(["B3raw"],["highchla2"]);
    break;
  case 11:
    img=img.select("B2raw","B1raw");
    img=img.expression("b('B2raw')/b('B1raw')");
    if (testThresh==1) {
      img=img.select("B2raw").gte(thresholds[alg]);
    }
    img=img.select(["B2raw"],["lowchla1"]);
    break;
  case 12:
    img=img.select("B3raw","B2raw","B1raw");
    img=img.expression("(b('B1raw')-b('B3raw'))/b('B2raw')");
    if (testThresh==1) {
      img=img.select("B1raw").gte(thresholds[alg]);
    }
    img=img.select(["B1raw"],["lowchla2"]);
    break;
  case 13:
    img=img.select("B7raw","B5raw","B4raw","B3raw","B1raw");
    img=img.expression("47.7-9.21*(2.9594+1.6203*b('B3raw'))/(2.1572+0.9198*b('B1raw'))+" +
      "29.7*(3.5046+0.8950*b('B4raw'))/(2.1572+0.9198*b('B1raw'))-" + 
      "118*(3.5046+0.8950*b('B4raw'))/(2.9594+1.6203*b('B3raw'))-" + 
      "6.81*(3.1591+1.0111*b('B5raw'))/(2.9594+1.6203*b('B3raw'))+" +
      "41.9*(2.8122+1.3984*b('B7raw'))/(2.9594+1.6203*b('B3raw'))-" + 
      "14.7*(2.8122+1.3984*b('B7raw'))/(3.5046+0.8950*b('B4raw'))");    
    if (testThresh==1) {
      img=img.select("constant").gte(thresholds[alg]);
    }
    img=img.select(["constant"],["PC"]);
    break;
  }
  if (addGreen==1) {
    //calc greenness
    var gness=calcGreenness(image);
    img=img.where(gness.eq(0),0)
  }
  if (analysis!=1&&analysis!=3) {
    img=img.where(yesCloud,-1); //don't turn clouds into -1 for summing...will sum negative ones!
  }
  img=img.addBands(yesCloud);
  
  return (image.addBands(img));
};
var getClouds = function(image) {
  //get cloudScore for whole image
  //var yesCloud = ee.Algorithms.Landsat.simpleCloudScore(image).gte(50).select("cloud");
  var yesCloud = calcACCA(image).select("cloud");
  //var yesCloudbuff = yesCloud.focal_max(5);
  return (yesCloud);
};
//Function to return a reduced region thing (for mapping across collections)
var reduceMap = function (img) {
    var b = img.reduceRegion({
        reducer: ee.Reducer.sum(),
        geometry: geom,       // NOTE THIS IS SET BEFOREHAND
        scale: res,         // NOTE THIS IS SET GLOBALLY
        bestEffort: false,
        maxPixels: 15000000
    });
    var d = ee.Date(img.get('system:time_end'));
    var toArea = res*res/1000/1000;
    if (testThresh==1) {
      var bloomValue = ee.Number(b.get(bandname)).multiply(toArea);
    }
    else {
      var bloomValue = ee.Number(b.get(bandname)); // don't convert to Area unless testing the threshold
    }
    return ee.Feature(null, {
        bloom: bloomValue, // NOTE 'bandname' IS SET BEFOREHAND
        cloud: ee.Number(b.get('cloud')).multiply(toArea),
        date: d.format('M/d/YYYY'),
        });
};


// SCRIPT --------------------------------------------------------------------------------------

//polygon for reducing images down
var pixelX = -83.00446; var pixelY = 41.75650;
var boxSizeX = 0.7; var boxSizeY = 0.35; 
var polygon = ee.Geometry.Polygon([[[pixelX - boxSizeX, pixelY - boxSizeY], [pixelX + boxSizeX, pixelY - boxSizeY], [pixelX + boxSizeX, pixelY + boxSizeY], [pixelX - boxSizeX, pixelY + boxSizeY]]]);

if (analysis==1||analysis==3) {
  // crude rings for summing Western basin
  var topleft = [-83.5,42.4]; var topright = [-82.52,42.05];
  var botleft = [-83.5,41.5]; var botright = [-82.85,41.5]; 
  var ringWB = ee.Geometry.Polygon([[topleft, topright, botright, botleft]]);
  //ring for summing Western+Sandusky bay
  botleft = [-83.5,41.37]; botright = [-82.74,41.37]; 
  var ringWBSan = ee.Geometry.Polygon([[topleft, topright, botright, botleft]]);
  //ring for summing Western+central basins basin
  topleft = [-83.5,42.29]; topright = [-81.3,42.29]; botright = [-81.3,41.37]; 
  var ringWBCB = ee.Geometry.Polygon([[topleft, topright, botright, botleft]]);
  
  switch (sumArea) {
    case 'ringWB':
      var feat = ringWB;
      break;
    case 'GLWD1':
      var feat = ee.FeatureCollection(
        "ft:1J7fNM12c0gcyqdJyfDCMab5K4ghUrMTHJlPT0TVy",
        "geometry").filterMetadata('LAKE_NAME', 'equals', 'Lake Erie WB');
      break;
    case 'NApoly':
      var feat = ee.FeatureCollection(
        "ft:1udN2giRitgz4elRx9mCGaS9iEYT2rBClu_4RK0kY");
      break;
    case 'hdpoly':
      var feat = hdpoly;
      break;
    case 'MODISlc':
      var land = ee.Image('MCD12Q1/MCD12Q1_005_2001_01_01').select('Land_Cover_Type_1').neq(0);
      var feat = land.reduceToVectors({
        geometry: ringWB,
        scale: 500,
        geometryType: 'polygon'
      }).filterMetadata('count','greater_than',10000).filterMetadata('label','equals',0);
      break;
    case 'GLWD3':
      var feat = glwd3.eq(1).reduceToVectors({
        geometry: ringWB,
        scale: 1000,
        geometryType: 'polygon',
      }).filterMetadata('count','greater_than',3000);
      break;
    case 'geometry2':
      var feat = geometry2;
      break;
  }

}
else if (analysis==2) {
  //Bridgeman locations
  var MB20 = ee.Feature.Point(-83.4539335454545, 41.7157824009324);
  var MB18 = ee.Feature.Point(-83.4014884525386, 41.7423449094923);
  var M8 = ee.Feature.Point(-83.3554984285714, 41.788793268254);
  var M7 = ee.Feature.Point(-83.2970959858334, 41.733206546667);
  var GR1 = ee.Feature.Point(-83.1879136700405, 41.8203754493927);
  var P4 = ee.Feature.Point(-83.1047193108642, 41.7511260912346);
  // these points are the centroids of the landsat pixels closest to the actual locations
  var allpoints = ee.Feature.MultiPoint(
    -83.45398396810982, 41.71574058512131,  /* MB20 center */
    -83.40143252398883, 41.742420549059666,  /* MB18 center */
    -83.35561844449873, 41.78877361772023,   /* 8M center  */
    -83.29713811950255, 41.73325773316164,   /* 7M center  */
    -83.18799281248202, 41.820304484192825,  /* GR1 center */
    -83.10471898564415, 41.75104437578721   /* 4P center  */
  );
  var allptsString = ['4P','GR1','8M','MB18','7M','MB20',];
  var allptsLong = [-83.10471898564415, -83.18799281248202, -83.35561844449873, /* 4P, GR1, 8M */
    -83.40143252398883, -83.29713811950255, -83.45398396810982];  /* MB18, 7M, MB20 */
  var allptsLat = [41.75104437578721, 41.820304484192825, 41.78877361772023, /* 4P, GR1, 8M */
    41.742420549059666, 41.73325773316164, 41.71574058512131]; /* MB18, 7M, MB20 */
}
else if (analysis==4) {
  // for points from literature
  var allpoints = ee.Feature.MultiPoint(
    //-82.73842, 41.02274  // Nicholls 1993 location 
    //-82.82683333333333, 41.666833333333333  // Holland 1993 location 
    -82.79266666666667, 41.558833333333333, // Wu & Culver 1991 Nearshore location 
    -82.774, 41.6445 // Wu & Culver 1991 Offshore location 

  );
  var allptsString = ['WuCulver1991_NearShore','WuCulver1991_OffShore'];//['Holland1993'];
}
else if (analysis==5) {
  // points from EPA
  var allpoints = ee.Feature.MultiPoint(
    -82.933833, 41.684917, //ER58
    -83.151033, 41.726333, //ER59
    -83.196667, 41.891667, //ER60
    -83.045267, 41.946783, //ER61
    -82.916667, 41.840833, //ER91M
    -82.686667, 41.867133  //ER92
  );
}
else if (analysis==6) {
  // points from EC
  var allpoints = ee.Feature.MultiPoint(
    -82.7417, 41.6517, 
    -82.7337857142857, 41.7387857142857, 
    -82.85, 41.7502428571429, 
    -82.9083, 41.691875, 
    -82.9470625, 41.6671125, 
    -83.0392571428572, 41.7069285714286, 
    -83.138725, 41.7344, 
    -83.2576875, 41.777925, 
    -83.263725, 41.893, 
    -83.1835125, 41.8769, 
    -83.1030714285714, 41.8367, 
    -82.9848333333333, 41.8938666666667, 
    -82.8946222222222, 41.9099777777778, 
    -82.8746111111111, 41.8970888888889, 
    -82.9497888888889, 41.8236444444444, 
    -82.8121222222222, 41.8688555555555, 
    -82.7075, 41.9188111111111, 
    -82.7046888888889, 41.9276888888889, 
    -82.86625, 41.66725, 
    -82.4319166666667, 42.0633333333333, 
    -83.1503, 41.72545, 
    -83.1979, 41.8914, 
    -83.0375, 41.9475, 
    -83.0167, 41.5692, 
    -83.0017, 41.5817, 
    -82.9611, 41.6317, 
    -82.9117, 41.6883, 
    -82.8517, 41.7567, 
    -82.75, 41.875, 
    -82.675, 41.9567, 
    -82.64, 41.9933, 
    -82.6199666666667, 42.0222333333333, 
    -82.9167, 41.9083, 
    -83.1, 41.835, 
    -82.9633, 41.7983, 
    -83.0483, 41.685, 
    -83.215, 41.7633, 
    -83.2783, 41.72, 
    -83.3483, 41.845, 
    -83.1983, 41.8683, 
    -83.275, 41.8867, 
    -83.2067, 41.9583, 
    -83.0533, 41.9667, 
    -82.675, 41.5653, 
    -82.8692, 41.6836, 
    -82.6325, 41.6994, 
    -83.0839, 41.8467, 
    -82.8422, 41.7833, 
    -82.9761, 41.82, 
    -82.8672, 41.89365, 
    -82.54, 41.8419, 
    -82.5839, 41.8311, 
    -82.6983, 41.7117, 
    -82.7139, 41.6439, 
    -82.7203, 41.5689, 
    -83.2078391304348, 41.9666217391304, 
    -83.31184, 41.764015, 
    -82.6245947368421, 41.9827157894737, 
    -82.6667391304348, 41.8917391304348, 
    -82.733515, 41.741735, 
    -82.9249142857143, 41.6085857142857, 
    -82.9762125, 41.819875, 
    -83.0505565217391, 41.9499391304348, 
    -83.2001695652174, 41.8666086956522, 
    -83.332075, 41.7923, 
    -83.149515, 41.72499, 
    -82.965, 41.9217
  );
}

for (var yr=startyr; yr<=endyr; yr++)
{
  // first and last dates to include for max
  if (singleDate===null){ 
    if (customDates===0) {
      var firstdate = new Date(yr + "/07/01");
      var seconddate = new Date(yr + "/10/31");
    }
    else {
      var firstdate = new Date(yr + firstday);
      var seconddate = new Date(yr + secondday);
    }
  } else {
    //var firstdate = new Date((singleDate.getMonth()+1 + "/").concat(singleDate.getDate()-1,
      //"/",singleDate.getFullYear())); 
    var firstdate=new Date(singleDate-86400000);
    print (firstdate);
    
    if (singleDate.getDate()+1 == 32 || (singleDate.getDate()+1 ==31 && singleDate.getMonth()+1 !=9) ) {
      var monthText = singleDate.getMonth()+2;
      var dayText = 1;
    }
    else {
      var monthText = singleDate.getMonth()+1;
      var dayText = singleDate.getDate()+1;
    }
    var seconddate = new Date((monthText + "/").concat(dayText,
      "/",singleDate.getFullYear())); 
    print (seconddate);
  }
  
  // Filter to only include images covering Lake Erie
  var collection = ee.ImageCollection('LT' + inst + '_L1T')
    .filterDate(firstdate,seconddate).filterBounds(polygon);
  var collectionTOA = ee.ImageCollection('LT' + inst + '_L1T_TOA')
    .filterDate(firstdate,seconddate).filterBounds(polygon);
  
  // Overwrite DN collection with TOA/SR collection
  switch (input) {
    case 1:
      // convert to DO-subtracted spectral radiance
      collection = collection.map(convertToLplusDOsubtract);
      break;
    case 2:
      collection = collectionTOA; // overwrite DN with TOA 
      break;
    case 3:
      collection = ee.ImageCollection('LEDAPS/LT' + inst + '_L1T_SR')
        .filterDate(firstdate,seconddate).filterBounds(polygon);
      break;
  }
  
  // calculate bloom
  switch(alg)
  {
  case 1:
    if (input==1) {
      
    }
    if (inst==7)      { 
     //combine TOA and regular LANDSAT
     collection = collection.select(["B1","B3","B4","B5","B7"],
        ["B1raw","B3raw","B4raw","B5raw","B7raw"]); 
        // only take bands 1,3,4,5,7 from raw LANDSAT
     collection = collection.combine(collectionTOA,true);  
        // then combine raw LANDSAT band 4 with TOA reflectance
      var val_col = collection.map(calculateLBPC_7);
      
    }
    else if (inst==5) { 
      // only take bands 1,3,4,5,7 from raw LANDSAT
     collection = collection.select(["B1","B3","B4","B5","B7"],
        ["B1raw","B3raw","B4raw","B5raw","B7raw"]); 
      // then combine raw LANDSAT band 4 with TOA reflectance
     collection = collection.combine(collectionTOA,true);  
  
     var val_col = collection.map(calculateLBPC_5);
    }
    var layername='Low Bloom Phyocyanin Content'; var bandname='PC';
    val_col = val_col.select(["PC","cloud"]);
    break;
  case 2:
    //combine TOA and regular LANDSAT
    collection = collection.select(["B4"],["B4raw"]); // only take band 4 from raw LANDSAT
    collection = collection.combine(collectionTOA,true);  // then combine raw LANDSAT band 4 with TOA reflectance
    
    var val_col = collection.map(calcAlgorithm);
    val_col = val_col.select(["band4thresh","cloud"]);

    var layername='Band 4 Bloom'; var bandname='band4thresh';
    break;
  case 3:
    //combine TOA and regular LANDSAT
    collection = collection.select(["B4","B5"],["B4raw","B5raw"]); // only take band 4 from raw LANDSAT
    collection = collection.combine(collectionTOA,true);  // then combine raw LANDSAT band 4 with TOA reflectance
    
    var val_col = collection.map(calcAlgorithm);
    val_col = val_col.select(["stumpf0","cloud"]);

    var layername='Stumpf 0 Bloom'; var bandname='stumpf0';
    break;
  case 4:
    //combine TOA and regular LANDSAT
    collection = collection.select(["B4","B3"],["B4raw","B3raw"]); // only take required bands from raw LANDSAT
    collection = collection.combine(collectionTOA,true);  // then combine raw LANDSAT band 4 with TOA reflectance
    
    var val_col = collection.map(calcAlgorithm);
    val_col = val_col.select(["stumpf1","cloud"]);

    var layername='Stumpf 1 Bloom'; var bandname='stumpf1';
    break;
  case 5:
    //combine TOA and regular LANDSAT
    collection = collection.select(["B4","B3","B5"],["B4raw","B3raw","B5raw"]); // only take required bands from raw LANDSAT
    collection = collection.combine(collectionTOA,true);  // then combine raw LANDSAT band 4 with TOA reflectance
    
    var val_col = collection.map(calcAlgorithm);
    val_col = val_col.select(["stumpf2","cloud"]);

    var layername='Stumpf 2 Bloom'; var bandname='stumpf2';
    break;
  case 6:
    //combine TOA and regular LANDSAT
    collection = collection.select(["B4","B3","B5"],["B4raw","B3raw","B5raw"]); // only take required bands from raw LANDSAT
    collection = collection.combine(collectionTOA,true);  // then combine raw LANDSAT band 4 with TOA reflectance
    
    var val_col = collection.map(calcAlgorithm);
    val_col = val_col.select(["stumpf3","cloud"]);

    var layername='Stumpf 3 Bloom'; var bandname='stumpf3';
    break;
  case 7:
    //combine TOA and regular LANDSAT
    collection = collection.select(["B4","B3","B5"],["B4raw","B3raw","B5raw"]); // only take required bands from raw LANDSAT
    collection = collection.combine(collectionTOA,true);  // then combine raw LANDSAT band 4 with TOA reflectance
    
    var val_col = collection.map(calcAlgorithm);
    val_col = val_col.select(["stumpf3b","cloud"]);

    var layername='Stumpf 3b Bloom'; var bandname='stumpf3b';
    break;
  case 8:
    //combine TOA and regular LANDSAT
    collection = collection.select(["B4","B3","B5","B1"],["B4raw","B3raw","B5raw","B1raw"]); // only take required bands from raw LANDSAT
    collection = collection.combine(collectionTOA,true);  // then combine raw LANDSAT band 4 with TOA reflectance
    
    var val_col = collection.map(calcAlgorithm);
    val_col = val_col.select(["stumpf4","cloud"]);

    var layername='Stumpf 4 Bloom'; var bandname='stumpf4';
    break;
  case 9:
    //combine TOA and regular LANDSAT
    collection = collection.select(["B4","B3","B1"],["B4raw","B3raw","B1raw"]); // only take required bands from raw LANDSAT
    collection = collection.combine(collectionTOA,true);  // then combine raw LANDSAT band 4 with TOA reflectance
    
    var val_col = collection.map(calcAlgorithm);
    val_col = val_col.select(["stumpf5","cloud"]);

    var layername='Stumpf 5 Bloom'; var bandname='stumpf5';
    break;
  case 10:
    //combine TOA and regular LANDSAT
    collection = collection.select(["B4","B3"],["B4raw","B3raw"]); // only take required bands from raw LANDSAT
    collection = collection.combine(collectionTOA,true);  // then combine raw LANDSAT band 4 with TOA reflectance
    
    var val_col = collection.map(calcAlgorithm);
    val_col = val_col.select(["highchla2","cloud"]);

    var layername='High Chla 2 Bloom'; var bandname='highchla2';
    break;
  case 11:
    //combine TOA and regular LANDSAT
    collection = collection.select(["B4","B2","B1"],["B4raw","B2raw","B1raw"]); // only take required bands from raw LANDSAT
    collection = collection.combine(collectionTOA,true);  // then combine raw LANDSAT band 4 with TOA reflectance
    
    var val_col = collection.map(calcAlgorithm);
    val_col = val_col.select(["lowchla1","cloud"]);

    var layername='Low Chla 1 Bloom'; var bandname='lowchla1';
    break;
  case 12:
    //combine TOA and regular LANDSAT
    collection = collection.select(["B4","B3","B2","B1"],["B4raw","B3raw","B2raw","B1raw"]); // only take required bands from raw LANDSAT
    collection = collection.combine(collectionTOA,true);  // then combine raw LANDSAT band 4 with TOA reflectance
    
    var val_col = collection.map(calcAlgorithm);
    val_col = val_col.select(["lowchla2","cloud"]);

    var layername='Low Chla 2 Bloom'; var bandname='lowchla2';
    break;
  case 13:
    //combine TOA and regular LANDSAT
    collection = collection.select(["B7","B5","B4","B3","B1"],["B7raw","B5raw","B4raw","B3raw","B1raw"]); // only take required bands from raw LANDSAT
    collection = collection.combine(collectionTOA,true);  // then combine raw LANDSAT band 4 with TOA reflectance
    
    var val_col = collection.map(calcAlgorithm);
    val_col = val_col.select(["PC","cloud"]);

    var layername='Phycocyanin Detection Bloom'; var bandname='PC';
    break;
  }
  var val_col2 = collectionTOA.map(getClouds);
  var val = ee.Image(val_col.first());
  val = val.select(bandname);
  
  //sum area in suspected
  var suspectedClouds = val.eq(-1).reduceRegion({
    reducer:ee.Reducer.sum(),
    geometry: suspected, 
    scale: res,
    bestEffort: false,
    maxPixels: 15000000
  });
  print('Suspected Cloud area:')
  print(ee.Number(suspectedClouds.get(bandname))
    .multiply(res*res/1000/1000));
    
  //sum area in hdpoly
  var WBarea = val.reduceRegion({
    reducer:ee.Reducer.count(),
    geometry: hdpoly, 
    scale: res,
    bestEffort: false,
    maxPixels: 15000000
  });
  print('HDpoly area:')
  print(ee.Number(WBarea.get(bandname))
    .multiply(res*res/1000/1000));
  
  /*//get area of WB
  Map.addLayer(val,{min:0.014, max:0.038, palette:[ 
          '000000', // black 0.014 and below
          'ff00ff', // purple 0.017
          '0000ff', // blue 0.020
          '00ffff', // cyan 0.023
          '00ff00', // green 0.026
          'ffff00', // yellow 0.029
          'ffa500', // orange 0.032
          'ff0000', // red 0.035
          '660000', // red 0.038
          ]},'plain')
          
  Map.addLayer(val,{min:0,max:1,palette:['0000ff','00ff00']},'plain')
  var reduced = val.reduceRegion({
    reducer:ee.Reducer.sum(),
    geometry: hdpoly,
    scale: res,
    bestEffort: false,
    maxPixels: 15000000
  });
  
  var indiv_area = ee.Number(reduced.get('stumpf0'))
    .multiply(res*res/1000/1000).aside(print)
  var histval = val.where(val.eq(-1),0)
  print(Chart.image.histogram(histval,hdpoly,30))*/
  
  
  //display max value
  // var reduced = val.reduceRegion({
  //   reducer:ee.Reducer.max(),
  //   geometry: hdpoly,
  //   scale: res,
  //   bestEffort: false,
  //   maxPixels: 15000000
  // });
  // print(reduced.get('stumpf0'));
  
  //show histogram
  
  // Pre-define some customization options.
  var options = {
    title: 'Landsat 5 NIR with SAC histogram, NIRwithSAC + bands 4 and 5',
    fontSize: 20,
    hAxis: {title: 'value'},
    vAxis: {title: 'count'},
    series: {
      0: {color: 'blue'},
      1: {color: 'green'},
      2: {color: 'red'}
    }
  };
  
  Map.addLayer(val.addBands(collection.first()));
  Map.addLayer(val.gte(0.02346),{},'Bloom Pixels');
  var val_forhist = val.addBands(collection.select('B[4-5]').first());
  val_forhist = val_forhist.updateMask(val_forhist.select('stumpf0').neq(-1));
  // Make the histogram, set the options.
  var histogram = Chart.image.histogram(val_forhist, hdpoly, 90,null,0.0025)
      .setSeriesNames(['stumpf0','B4', 'B5'])
      .setOptions(options);
  // Display the histogram.
  print(histogram);
  
  // Repeat with added mask for only bloom pixels
  var val_forhist2 = val_forhist.updateMask(val.select('stumpf0').gte(0.02346));
  var histogram2 = Chart.image.histogram(val_forhist2, hdpoly, 90,null,0.0025)
      .setSeriesNames(['stumpf0','B4', 'B5'])
      .setOptions(options);
  print(histogram2)
  
  
  //Visualization and downloading -------------------------------------------------
  var region='[[-83.7, 42.29],[-83.7,41.35],[-82.2,41.35],[-82.2,42.29]]';
  var bPal=["3A4A50","FFFFFF","000000","31a354"];
  
  if (input==0) {
    var cPal=['7C7062','7C7062', // land for -2
          'ffffff', 'ffffff', // cloud for -1
          '0000ff', '0000ff', '0000ff', '0000ff', '0000ff',
          '0000ff', '0000ff', '0000ff', '0000ff', '0000ff',// blue for reflectance<3.75
          '00ffff', // cyan for 3.75-4.25
          '00ff00', // green for 4.25-4.75
          'ffff00', // yellow for 4.75-5.25
          'ffa500', // orange for 5.25-5.75
          'ff0000', 'ff0000','ff0000' // red for <5.75 and above
          ];
  }
  else {
    var cPal= // ignore the ranges, just look at colors
    //       [ // blue 0.018
    //       '0000ff', '0000ff', '0000ff', '0000ff', '0000ff',
    //       '0000ff', '0000ff', '0000ff', '0000ff', '0000ff',
    //       '0000ff',
    //       '00ffff', // cyan
    //       '00ff00', // green 
    //       'ffff00', // yellow 
    //       'ffa500', // orange 
    //       'ff0000', // red0.0265
    //       ]
          [ 
          //'000066', // dark blue
           '000000', // black 0.014 and below
          // 'ff00ff', // purple 0.017
          '0000ff', // blue 0.020
          '00ffff', // cyan 0.023
          '00ff00', // green 0.026
          'ffff00', // yellow 0.029
          'ffa500', // orange 0.032
          'ff0000', // red 0.035
          '660000', // red 0.038
          ];
          // [ 
          // '000000', // black 0.01475 and below
          // '5e3c99', // black 0.01825
          // '5e3c99', // lavender 0.02175
          // /*'ffffcc',*/ 'ffffb2', // tan/tan 0.02525
          // /*'c2e699',*/ 'fecc5c', // light-green/mustard 0.02875
          // /*'78c679',*/ 'fd8d3c', // green/orange 0.03225
          // /*'31a354',*/ 'f03b20', // deep-green/orange-red 0.03575
          // /*'006837',*/ 'bd0026', // forest-green/maroon 0.03925
          // ];
          // [
          //   '000000',
          //   '000000',
          //   '000000',
          //   '000000',
          //   '000000',
          //   '000000',
          //   '000000',
          //   '000000',
          //   '000000',
          //   '000000',
          //   '000000',
          //   '000000',
          //   '000000',
          //   '000000',
          //   '000000',
          //   '000000',
          //   '31a354',
          //   '31a354',
          //   '31a354',
          //   '31a354',
          //   '31a354',
          //   '31a354',
          //   '31a354',
          //   '31a354',
          //   '31a354',
          //   '31a354',
          //   '31a354',
          //   '31a354',
          //   '31a354',
          //   '31a354',
          //   '31a354',
          //   '31a354',
          //   ];
  }
  
  if (visualize==1) {
    // create land mask
    var land = ee.Image('ESA/GLOBCOVER_L4_200901_200912_V2_3')
      .select('landcover').neq(210);;
    val = val.where(land,-2);
    if (truecolor==1) {
      Map.addLayer(ee.Image(collection.first()),{bands:['B3','B2','B1'], 'gamma': 2},'True Color');

      if (download==1) { //downloading the TC image
        Export.image(ee.Image(collection.first()).visualize(['B3','B2','B1'],null,null,null,null,2),
          "TC-".concat(singleDateString.replace("/","-").replace("/","-")),
          {'region': region,'driveFolder':exportFolder,'scale':90});
      }
      if (tcmask==1) {
        if (testThresh==1) {
          val=val.mask(val);
        }
        val=val.mask(val.neq(-2))
      }
    }
    if (alg==1) {
      /*if (inst==7) {
        var VincentPalette = [
          'ffffff', // cloud for -1
          '0000ff', '0000ff', '0000ff', '0000ff', '0000ff', 
          '0000ff', '0000ff', '0000ff', // blue for phycocyanin<7.5
          '00ffff', '00ffff', '00ffff', // cyan for 7.5-10.5
          'ffff00', 'ffff00', 'ffff00', // yellow for 10.5-12.5
          'ff0000', 'ff0000' // red for 12.5-15
        ];
      }
      else if (inst==5) {*/
        var  VincentPalette = [
          'ffffff', // cloud for -1
          '0000ff', '0000ff', '0000ff', '0000ff', '0000ff', 
          '0000ff', // blue for 0.5<phycocyanin<5.5
          '00ffff', '00ffff', '00ffff', // cyan for 5.5-8.5
          '00ff00', '00ff00', '00ff00', // green for 8.5-11.5
          'ffff00', 'ffff00', 'ffff00', // yellow for 11.5-14.5
          'ffa500', 'ffa500', 'ffa500', // orange for 14.5-17.5
          'ff0000', 'ff0000', 'ff0000', // red for 17.5-20
        ];
      //}
      addToMap(val.select("PC"),{min:-1,max:20, palette: VincentPalette},layername); //blue to cyan to yellow to red
      
      if (download==1) {
        if (flatten==1) {
          var flattenedImage = ee.ImageCollection.fromImages([
            ee.Image(collectionTOA.first()).visualize(['B3','B2','B1'],null,null,null,null,2),
            val.visualize(null,null,null,-1,20,null,null,VincentPalette),
            ]).mosaic();
          Export.image(flattenedImage,
            "VincentTC-".concat(singleDateString.replace("/","-").replace("/","-")),
            {'region': region,'driveFolder':exportFolder,'scale':90});
        }
        else {
          //Also export image without TC mask
          Export.image(val.visualize(null,null,null,-1,20,null,null,VincentPalette),
            "Vincent-".concat(singleDateString.replace("/","-").replace("/","-")),
            {'region': region,'driveFolder':exportFolder,'scale':90});
        }
        }
    }
    // else if (alg==2) {
    //   Map.addLayer(val,{min:-2,max:1,palette: bPal},layername);
    //   //addToMap(val_col2.first(),{min:0,max:1,palette:"FFFFFF,000000"},'Cloud Score');
    //   //print(val_col2.first().getInfo())
    //   if (download==1) {
    //     if (flatten==1) {
    //       var flattenedImage = ee.ImageCollection.fromImages([
    //         // ee.Image(collectionTOA.first()).visualize(['B3','B2','B1'],null,null,null,null,2),
    //         val.visualize(null,null,null,-2,1,null,null,bPal),
    //         ]).mosaic();
    //       Export.image(flattenedImage,
    //         "B-".concat(singleDateString.replace("/","-").replace("/","-")),
    //         {'region': region,'driveFolder':exportFolder,'scale':90});
    //     }
    //     else {
    //       Export.image(val.visualize(null,null,null,-2,1,null,null,bPal),
    //         "B-".concat(singleDateString.replace("/","-").replace("/","-")),
    //         {'region': region,'driveFolder':exportFolder,'scale':90});
    //     }
    //   }
    // }
    else if (alg>=2) {
      if (testThresh==1) {
        //visualize without clouds
        //addToMap(val,{min:0,max:1,palette:"0000FF,00FF00"},layername);
        //visualize with clouds
        Map.addLayer(val,{min:-2,max:1,palette: bPal},layername);
        var boundaries = ee.FeatureCollection([
          ee.Feature(WB_boundary2,{'value':1}),
          ee.Feature(bdy_dict[singleDateString.substr(0,4)],{'value':2})])
          .reduceToImage({
            properties: ['value'],
            reducer: ee.Reducer.first()
          }).focal_max(10)
        if (download==1) {
          if (flatten==1) {
            var flattenedImage = ee.ImageCollection.fromImages([
              // ee.Image(collectionTOA.first()).visualize(['B3','B2','B1'],null,null,null,null,2),
              val.visualize(null,null,null,-2,1,null,null,bPal),
              val.mask(val.eq(-1)).clip(suspected)
                .visualize({min:1,max:1,palette:'ffff00'}),
              boundaries.visualize({min:1,max:2,palette:['D3D3D3','436060']})
              ]).mosaic();
            Export.image(flattenedImage,
              "B-".concat(singleDateString.replace("/","-").replace("/","-")),
              {'region': region,'driveFolder':exportFolder,'scale':90});
            Map.addLayer(flattenedImage,{},'ExportImage')
          }
          else {
            Export.image(val.visualize(null,null,null,-2,1,null,null,bPal),
            "B-".concat(singleDateString.replace("/","-").replace("/","-")),
            {'region': region,'driveFolder':exportFolder,'scale':90})
          }
        }
      }
      else if (alg==3) {
        if (input==2) {
          // var plotParams = {min:0.0007, max:0.0463, palette:cPal}; // when using the cPal that's actually bPal: 31a354
          var plotParams = {min:0.0029375, max:0.0440625, palette:cPal}; // for S1
        } //hammock
        else if (input===0) {
          var plotParams = {min:-2, max:7, palette: cPal};
        }
        var boundaries = ee.FeatureCollection([
          ee.Feature(WB_boundary2,{'value':1}),
          ee.Feature(bdy_dict[singleDateString.substr(0,4)],{'value':2})])
          .reduceToImage({
            properties: ['value'],
            reducer: ee.Reducer.first()
          }).focal_max(10)
        if (download==1) {
          if (flatten==1) {
            var image_land_clouds = ee.ImageCollection.fromImages([
              // ee.Image(collectionTOA.first()).visualize(['B3','B2','B1'],null,null,null,null,2),
              val.visualize(plotParams),
              // ee.Image(collectionTOA.first()).select(['B5'])
              //   .mask(ee.Image(collectionTOA.first()).select(['B5']).lte(0.08))
              //   .visualize({min:0,max:0.02,palette:['000000','0000ff','00ff00','ff0000']}),
              // ee.Image(collectionTOA.first()).select(['B4'])
              //   .mask(ee.Image(collectionTOA.first()).select(['B4']).lte(0.08))
              //   .visualize({min:0,max:0.06,palette:['000000','0000ff','00ff00','ff0000']}),
              
              val.mask(val.eq(-2)).visualize({min:-2,max:-2,palette:'3A4A50'}),
              val.mask(val.eq(-1)).visualize({min:-1,max:-1,palette:'ffffff'}),
              boundaries.visualize({min:1,max:2,palette:['D3D3D3','436060']})
                  ]).mosaic();
            Map.addLayer(image_land_clouds,{},layername);

            Export.image(image_land_clouds,
              "C-".concat(singleDateString.replace("/","-").replace("/","-"))
                .concat(input_string),
                // .concat('_B5'),
              {'region': region,'driveFolder':exportFolder,'scale':90});
          }
          else {
            Export.image(val.visualize(plotParams),
              "C-".concat(singleDateString.replace("/","-").replace("/","-"))
                .concat(input_string),
              {'region': region,'driveFolder':exportFolder,'scale':90});
          }
        }
      }
      else if (alg>=10) {
        var ptiles = val.reduceRegion({
          reducer: ee.Reducer.percentile([5, 95]),
          geometry: geometry2,
          scale:30,
          bestEffort: true
        });
        var p5 = ptiles.get(bandname+'_p5').aside(print);
        var p95 = ptiles.get(bandname+'_p95').aside(print);
        addToMap(val,{min:0, max:0.63,palette:['0000ff','00ff00']},layername);
      }
      else {
        addToMap(val,{},layername);
      }
    }
    //var lakeOutline = ee.FeatureCollection('ft:1lftAbNdeN96b9LzVnFL_yak2ZZyvC94ibJoheVlE');
    //addToMap(lakeOutline,{},'Lake Outline');
  }
  
// ANALYSIS ---------------------------------------------------------------------------
  
  if (analysis==1) {
    // Sum over area in box (for comparison to Stumpf)
    print(yr + ": " + val.reduceRegion(ee.Reducer.sum(), feat, res).getInfo().band4thresh*res/1000*res/1000);
    //print(yr + ": " + val.reduceRegion(ee.Reducer.sum(), ringWBSan, res).getInfo().band4thresh*res/1000*res/1000);
    //print(yr + ": " + val.reduceRegion(ee.Reducer.sum(), ringWBCB, res).getInfo().band4thresh*res/1000*res/1000);
       
  }
  else if (analysis==2||analysis>=4) {  
    // Sum over areas that Bridgeman sampled
    var geom = allpoints; // this is the geometry used for bridgeman function MB20, MB18, M8, M7, GR1, P4 or allpoints
                          // or the geometry of points in analysis 4,5,6 (literature or EC/EPA)
    print('val_col', val_col);
    var bridge = val_col.getRegion(geom,30);
    print('bridge', bridge); //banana
    
    // remove first item in list with headers
    bridge = bridge.remove(bridge.get(0)); 
      
    if (yr == startyr) {
      var exportList = bridge;
    }
    else {
      exportList = exportList.cat(bridge);
    }
      
    /*if (analysis==4) {
      //Only for Wu & Culver 1991
      if (long<-82.78) {
        point=0; //Wu & Culver 1991 NearShore Location
      }
      else { 
        point=1; //Wu & Culver 1991 OffShore Location
      }
    }*/
    
    Map.addLayer(ee.Feature(geom, {}),{color: "FF0000"},'Point location'); 
    
  }
  else if (analysis==3) {  
    // Sum over areas that rings
    geom = feat; // this is the geometry used for summing in reduceMap()
    var stumpf = val_col.map(reduceMap);

    print(stumpf);
    if (yr == startyr) {
      var exportCollection = stumpf;
    }
    else {
      exportCollection = exportCollection.merge(stumpf);
    }
    
  }
  else if (fitThreshold==1) {
    var singleImage = val;
    if (alg == 4 || alg == 6 || alg==7) {
      singleImage = singleImage.multiply(-1); // invert the images where the values are negative
    }
    singleImage = singleImage.where(singleImage.lt(0),0); // convert -2 land pixels back to 0 for summing
    
    var initialthreshes = [null, null, 0.0275, 0.025, 0.024, 
      0.50, 0.0013, 0.50, 1.138, 0.46];
    var initialthresh=initialthreshes[alg]; // for TOA input
    initialthresh = 180; // for band4thresh SR
    Map.addLayer(singleImage,{},bandname);
    Map.addLayer(singleImage.gt(initialthresh),{},'Using threshold = '+initialthresh);
    print(Chart.image.histogram(singleImage,geometry2,90));
    
    
    // Add threshold images ranging from 0.10*initial to 2*initial as bands to an image
    var starting_percent = 100;
    for (var i=starting_percent; i<=starting_percent+20; i++) {
      var thresh_i=initialthresh*(i/100);
      if (i==starting_percent) {
        var multiImage = singleImage.gt(thresh_i).rename([thresh_i.toString()]);
      }
      else {
        multiImage = multiImage.addBands(singleImage.gt(thresh_i).rename([thresh_i.toString()]));
      }
    }
    print(multiImage, multiImage);
    
    // run reducer on all those bands
    var sumScale = 120;
    var bloomArea = multiImage.reduceRegion({
        reducer: ee.Reducer.sum(),
        geometry: geometry2,
        scale: sumScale,         // Note need to use 90 so that can aggregate this many pixels
        bestEffort: false,
        maxPixels: 15000000
      });
    // print the 
    print('bloomArea.keys()', bloomArea.keys())
    print('bloomArea.toArray().multiply(sumScale*sumScale/1000/1000).subtract(2063.05)', 
           bloomArea.toArray().multiply(sumScale*sumScale/1000/1000).subtract(2063.05))
    
    //    var finalthresholds = [null, null, 0.032725, 0.027725, 0.02664, 
    //  0.555, 0.001456, 0.53, 1.138, 0.5106]
    
    //    var areaError = [null, null, -672.45, -11.5, 311.13, 
    //  47.13, 131.95, -37.2, -392.96, -9.58] //negative means predicted smaller area
  
  }
      
} // looping end

//Exporting the values as a csv
if (testThresh===0) {  
  var thresh_string = 's';    }
else {  
  var thresh_string = 'Binary_Thresh'+thresholds[alg].toString().replace('.','') }
if (analysis ==2 || analysis==3) {
  if (analysis == 2) {
    print(exportList)
    var exportCollection = ee.FeatureCollection(exportList.map(function(list) {
      var list = ee.List(list);
      var stationDict = {
        '-83.35561844449873': 3, //8M
        '-83.40143252398883': 4, //MB18
        '-83.45398396810982': 6, //MB20
        '-83.29713811950255': 5, //7M
        '-83.18799281248202': 2, //GR1
        '-83.10471898564415': 1  //4P
      }
      
      var dict = {
          id: list.get(0),
          longitude: list.get(1),
          latitude: list.get(2),
          date: ee.Date(list.get(3)).format('M/d/yyyy'),
          station: ee.Dictionary(stationDict).get(list.get(1)),
          pointValue: list.get(4),
          cloudValue: list.get(5)
      }
      return ee.Feature(null, dict)
    }))
    print(exportCollection)
  }
  
  Export.table(ee.FeatureCollection(exportCollection),
    bandname+input_string+'_bloom'+thresh_string,
    { fileFormat: 'CSV', driveFolder: 'LakeErieGEE_csv'})
}
      
//display boxes for summing
if (analysis==1) {
  Map.addLayer(ringWB,{},'WB box for summing area'); 
  Map.addLayer(ringWBSan,{},'WB box for summing area'); 
  Map.addLayer(ringWBCB,{},'WB box for summing area'); 
}
else if (analysis==3) {
  Map.addLayer(geom,{},'box for summing area'); 
  
}
Map.setCenter(-82.5,41.8,8);

